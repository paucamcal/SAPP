[{"/Users/luna/Library/Mobile Documents/com~apple~CloudDocs/GitHub/paucamcal.github.io/AESP/src/index.js":"1","/Users/luna/Library/Mobile Documents/com~apple~CloudDocs/GitHub/paucamcal.github.io/AESP/src/reportWebVitals.js":"2","/Users/luna/Library/Mobile Documents/com~apple~CloudDocs/GitHub/paucamcal.github.io/AESP/src/App.js":"3","/Users/luna/Library/Mobile Documents/com~apple~CloudDocs/GitHub/paucamcal.github.io/AESP/src/Geolocation.js":"4"},{"size":535,"mtime":1693948117506,"results":"5","hashOfConfig":"6"},{"size":362,"mtime":1693948117508,"results":"7","hashOfConfig":"6"},{"size":5712,"mtime":1694197939318,"results":"8","hashOfConfig":"6"},{"size":1046,"mtime":1694121700106,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","suppressedMessages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"13"},"14ox8fs",{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"13"},{"filePath":"17","messages":"18","suppressedMessages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/luna/Library/Mobile Documents/com~apple~CloudDocs/GitHub/paucamcal.github.io/AESP/src/index.js",[],[],[],"/Users/luna/Library/Mobile Documents/com~apple~CloudDocs/GitHub/paucamcal.github.io/AESP/src/reportWebVitals.js",[],[],"/Users/luna/Library/Mobile Documents/com~apple~CloudDocs/GitHub/paucamcal.github.io/AESP/src/App.js",["24"],[],"import React, { Component } from 'react';\nimport Geolocation from './Geolocation';\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    organizations: [],\n    userLocation: null, // Store user's location data here\n  };\n\n  componentDidMount() {\n    // Access the API key from environment variables\n    const apiKey = process.env.REACT_APP_GOOGLE_API_KEY;\n\n    // Check if geolocation is available\n    if ('geolocation' in navigator) {\n      navigator.geolocation.getCurrentPosition(async (position) => {\n        // Get the user's latitude and longitude\n        const { latitude, longitude } = position.coords;\n\n        // Create the API request URL to convert coordinates to zip code\n        const geoApiUrl = `https://maps.googleapis.com/maps/api/geocode/json?latlng=${latitude},${longitude}&key=${apiKey}`;\n\n        try {\n          // Make the API request to get address components, including zip code\n          const geoResponse = await fetch(geoApiUrl);\n          if (!geoResponse.ok) {\n            throw new Error('Failed to fetch geolocation data from the API');\n          }\n\n          const geoData = await geoResponse.json();\n\n          // Extract the zip code from the response data\n          const zipCode = this.extractZipCode(geoData);\n\n          // Store the user's location and zip code in the state\n          this.setState({\n            userLocation: { latitude, longitude },\n            userZipCode: zipCode,\n          });\n\n          // Now you can use the user's zip code to find the nearest organization\n          const nearestOrg = await this.findNearestOrganization(zipCode);\n          console.log('Nearest Organization:', nearestOrg);\n        } catch (geoError) {\n          console.error('Error fetching geolocation data:', geoError);\n        }\n      });\n    } else {\n      // Geolocation is not available in this browser\n      // Handle accordingly, e.g., by showing a message to the user\n    }\n  }\n\n  // Function to extract zip code from the geocoding response\n  extractZipCode = (geoData) => {\n    // Parse the response data to find the zip code\n    const addressComponents = geoData.results[0]?.address_components || [];\n\n    for (const component of addressComponents) {\n      const types = component.types || [];\n      if (types.includes('postal_code')) {\n        return component.short_name;\n      }\n    }\n\n    return null; // Zip code not found\n  };\n\n  // Function to find the nearest organization based on user's zip code\n  findNearestOrganization = async (userZipCode) => {\n    // Replace 'YOUR_API_ENDPOINT' with your actual API endpoint URL\n    const apiUrl = `https://example.com/api/organizations?zipCode=${userZipCode}`;\n\n    try {\n      const response = await fetch(apiUrl);\n\n      if (!response.ok) {\n        throw new Error('Failed to fetch data from the API');\n      }\n\n      const data = await response.json();\n\n      // Find the nearest organization based on user's zip code\n      let nearestOrganization = null;\n      let nearestDistance = Infinity;\n\n      for (const org of data.organizations) {\n        // Replace this with your distance calculation logic\n        // Example: Haversine formula or any other suitable method\n        const distance = this.calculateDistance(\n          this.state.userLocation.latitude,\n          this.state.userLocation.longitude,\n          org.latitude,\n          org.longitude\n        );\n\n        if (distance < nearestDistance) {\n          nearestDistance = distance;\n          nearestOrganization = org;\n        }\n      }\n\n      return nearestOrganization;\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  // Function to calculate distance between two sets of coordinates\n  calculateDistance = (lat1, lon1, lat2, lon2) => {\n    // Convert latitude and longitude from degrees to radians\n    const degToRad = (degrees) => (degrees * Math.PI) / 180;\n    const radius = 6371; // Radius of the Earth in kilometers\n\n    const lat1Rad = degToRad(lat1);\n    const lon1Rad = degToRad(lon1);\n    const lat2Rad = degToRad(lat2);\n    const lon2Rad = degToRad(lon2);\n\n    // Haversine formula\n    const dLat = lat2Rad - lat1Rad;\n    const dLon = lon2Rad - lon1Rad;\n\n    const a =\n      Math.sin(dLat / 2) ** 2 +\n      Math.cos(lat1Rad) * Math.cos(lat2Rad) * Math.sin(dLon / 2) ** 2;\n\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n\n    // Calculate the distance in kilometers\n    const distance = radius * c;\n\n    return distance;\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <section className=\"hero-section\">\n          <div className=\"card-grid\">\n            <a className=\"card\" href=\"#mentalHealth\">\n              <div className=\"card__background\"></div>\n              <div className=\"card__content\">\n                <p className=\"card__category\">Mental Health Services</p>\n              </div>\n            </a>\n            <a className=\"card\" href=\"#domesticViolence\">\n              <div className=\"card__background\"></div>\n              <div className=\"card__content\">\n                <p className=\"card__category\">Domestic Violence Support</p>\n              </div>\n            </a>\n            <a className=\"card\" href=\"#lgbtq\">\n              <div className=\"card__background\"></div>\n              <div className=\"card__content\">\n                <p className=\"card__category\">LGBTQ+ Services</p>\n              </div>\n            </a>\n            <a className=\"card\" href=\"#elderlyServices\">\n              <div className=\"card__background\"></div>\n              <div className=\"card__content\">\n                <p className=\"card__category\">Elderly Care Services</p>\n              </div>\n            </a>\n          </div>\n        </section>\n      </div>\n    );\n  }\n}\n\nexport default App;","/Users/luna/Library/Mobile Documents/com~apple~CloudDocs/GitHub/paucamcal.github.io/AESP/src/Geolocation.js",[],[],{"ruleId":"25","severity":1,"message":"26","line":2,"column":8,"nodeType":"27","messageId":"28","endLine":2,"endColumn":19},"no-unused-vars","'Geolocation' is defined but never used.","Identifier","unusedVar"]