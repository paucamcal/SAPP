{"ast":null,"code":"/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */\n\nconst {\n  InnerState\n} = require('./inner-state');\nconst {\n  addInspection\n} = require('./utils');\nconst {\n  assert\n} = require('./assert');\n\n/**\r\n * @enum {number}\r\n * @alias txMode.isolationLevel\r\n * @readonly\r\n * @summary Transaction Isolation Level.\r\n * @description\r\n * The type is available from the {@link txMode} namespace.\r\n *\r\n * @see $[Transaction Isolation]\r\n */\nconst isolationLevel = {\n  /** Isolation level not specified. */\n  none: 0,\n  /** ISOLATION LEVEL SERIALIZABLE */\n  serializable: 1,\n  /** ISOLATION LEVEL REPEATABLE READ */\n  repeatableRead: 2,\n  /** ISOLATION LEVEL READ COMMITTED */\n  readCommitted: 3\n\n  // From the official documentation: http://www.postgresql.org/docs/9.5/static/sql-set-transaction.html\n  // The SQL standard defines one additional level, READ UNCOMMITTED. In PostgreSQL READ UNCOMMITTED is treated as READ COMMITTED.\n  // => skipping `READ UNCOMMITTED`.\n};\n\n/**\r\n * @class txMode.TransactionMode\r\n * @description\r\n * Constructs a complete transaction-opening `BEGIN` command, from these options:\r\n *  - isolation level\r\n *  - access mode\r\n *  - deferrable mode\r\n *\r\n * The type is available from the {@link txMode} namespace.\r\n *\r\n * @param {} [options]\r\n * Transaction Mode options.\r\n *\r\n * @param {txMode.isolationLevel} [options.tiLevel]\r\n * Transaction Isolation Level.\r\n *\r\n * @param {boolean} [options.readOnly]\r\n * Sets transaction access mode based on the read-only flag:\r\n *  - `undefined` - access mode not specified (default)\r\n *  - `true` - access mode is set to `READ ONLY`\r\n *  - `false` - access mode is set to `READ WRITE`\r\n *\r\n * @param {boolean} [options.deferrable]\r\n * Sets transaction deferrable mode based on the boolean value:\r\n *  - `undefined` - deferrable mode not specified (default)\r\n *  - `true` - mode is set to `DEFERRABLE`\r\n *  - `false` - mode is set to `NOT DEFERRABLE`\r\n *\r\n * It is used only when `tiLevel`=`isolationLevel.serializable`\r\n * and `readOnly`=`true`, or else it is ignored.\r\n *\r\n * @returns {txMode.TransactionMode}\r\n *\r\n * @see $[BEGIN], {@link txMode.isolationLevel}\r\n *\r\n * @example\r\n *\r\n * const {TransactionMode, isolationLevel} = pgp.txMode;\r\n *\r\n * // Create a reusable transaction mode (serializable + read-only + deferrable):\r\n * const mode = new TransactionMode({\r\n *     tiLevel: isolationLevel.serializable,\r\n *     readOnly: true,\r\n *     deferrable: true\r\n * });\r\n *\r\n * db.tx({mode}, t => {\r\n *     return t.any('SELECT * FROM table');\r\n * })\r\n *     .then(data => {\r\n *         // success;\r\n *     })\r\n *     .catch(error => {\r\n *         // error\r\n *     });\r\n *\r\n * // Instead of the default BEGIN, such transaction will start with:\r\n *\r\n * // BEGIN ISOLATION LEVEL SERIALIZABLE READ ONLY DEFERRABLE\r\n *\r\n */\nclass TransactionMode extends InnerState {\n  constructor(options) {\n    options = assert(options, ['tiLevel', 'deferrable', 'readOnly']);\n    const {\n      readOnly,\n      deferrable\n    } = options;\n    let {\n      tiLevel\n    } = options;\n    let level,\n      accessMode,\n      deferrableMode,\n      begin = 'begin';\n    tiLevel = tiLevel > 0 ? parseInt(tiLevel) : 0;\n    if (tiLevel > 0 && tiLevel < 4) {\n      const values = ['serializable', 'repeatable read', 'read committed'];\n      level = 'isolation level ' + values[tiLevel - 1];\n    }\n    if (readOnly) {\n      accessMode = 'read only';\n    } else {\n      if (readOnly !== undefined) {\n        accessMode = 'read write';\n      }\n    }\n    // From the official documentation: http://www.postgresql.org/docs/9.5/static/sql-set-transaction.html\n    // The DEFERRABLE transaction property has no effect unless the transaction is also SERIALIZABLE and READ ONLY\n    if (tiLevel === isolationLevel.serializable && readOnly) {\n      if (deferrable) {\n        deferrableMode = 'deferrable';\n      } else {\n        if (deferrable !== undefined) {\n          deferrableMode = 'not deferrable';\n        }\n      }\n    }\n    if (level) {\n      begin += ' ' + level;\n    }\n    if (accessMode) {\n      begin += ' ' + accessMode;\n    }\n    if (deferrableMode) {\n      begin += ' ' + deferrableMode;\n    }\n    super({\n      begin,\n      capBegin: begin.toUpperCase()\n    });\n  }\n\n  /**\r\n   * @method txMode.TransactionMode#begin\r\n   * @description\r\n   * Returns a complete BEGIN statement, according to all the parameters passed into the class.\r\n   *\r\n   * This method is primarily for internal use by the library.\r\n   *\r\n   * @param {boolean} [cap=false]\r\n   * Indicates whether the returned SQL must be capitalized.\r\n   *\r\n   * @returns {string}\r\n   */\n  begin(cap) {\n    return cap ? this._inner.capBegin : this._inner.begin;\n  }\n}\naddInspection(TransactionMode, function () {\n  return this.begin(true);\n});\n\n/**\r\n * @namespace txMode\r\n * @description\r\n * Transaction Mode namespace, available as `pgp.txMode`, before and after initializing the library.\r\n *\r\n * Extends the default `BEGIN` with Transaction Mode parameters:\r\n *  - isolation level\r\n *  - access mode\r\n *  - deferrable mode\r\n *\r\n * @property {function} TransactionMode\r\n * {@link txMode.TransactionMode TransactionMode} class constructor.\r\n *\r\n * @property {txMode.isolationLevel} isolationLevel\r\n * Transaction Isolation Level enumerator\r\n *\r\n * @see $[BEGIN]\r\n */\nmodule.exports = {\n  isolationLevel,\n  TransactionMode\n};","map":{"version":3,"names":["InnerState","require","addInspection","assert","isolationLevel","none","serializable","repeatableRead","readCommitted","TransactionMode","constructor","options","readOnly","deferrable","tiLevel","level","accessMode","deferrableMode","begin","parseInt","values","undefined","capBegin","toUpperCase","cap","_inner","module","exports"],"sources":["/Users/luna/Library/Mobile Documents/com~apple~CloudDocs/GitHub/paucamcal.github.io/AESP/node_modules/pg-promise/lib/tx-mode.js"],"sourcesContent":["/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */\r\n\r\nconst {InnerState} = require('./inner-state');\r\nconst {addInspection} = require('./utils');\r\nconst {assert} = require('./assert');\r\n\r\n/**\r\n * @enum {number}\r\n * @alias txMode.isolationLevel\r\n * @readonly\r\n * @summary Transaction Isolation Level.\r\n * @description\r\n * The type is available from the {@link txMode} namespace.\r\n *\r\n * @see $[Transaction Isolation]\r\n */\r\nconst isolationLevel = {\r\n    /** Isolation level not specified. */\r\n    none: 0,\r\n\r\n    /** ISOLATION LEVEL SERIALIZABLE */\r\n    serializable: 1,\r\n\r\n    /** ISOLATION LEVEL REPEATABLE READ */\r\n    repeatableRead: 2,\r\n\r\n    /** ISOLATION LEVEL READ COMMITTED */\r\n    readCommitted: 3\r\n\r\n    // From the official documentation: http://www.postgresql.org/docs/9.5/static/sql-set-transaction.html\r\n    // The SQL standard defines one additional level, READ UNCOMMITTED. In PostgreSQL READ UNCOMMITTED is treated as READ COMMITTED.\r\n    // => skipping `READ UNCOMMITTED`.\r\n};\r\n\r\n/**\r\n * @class txMode.TransactionMode\r\n * @description\r\n * Constructs a complete transaction-opening `BEGIN` command, from these options:\r\n *  - isolation level\r\n *  - access mode\r\n *  - deferrable mode\r\n *\r\n * The type is available from the {@link txMode} namespace.\r\n *\r\n * @param {} [options]\r\n * Transaction Mode options.\r\n *\r\n * @param {txMode.isolationLevel} [options.tiLevel]\r\n * Transaction Isolation Level.\r\n *\r\n * @param {boolean} [options.readOnly]\r\n * Sets transaction access mode based on the read-only flag:\r\n *  - `undefined` - access mode not specified (default)\r\n *  - `true` - access mode is set to `READ ONLY`\r\n *  - `false` - access mode is set to `READ WRITE`\r\n *\r\n * @param {boolean} [options.deferrable]\r\n * Sets transaction deferrable mode based on the boolean value:\r\n *  - `undefined` - deferrable mode not specified (default)\r\n *  - `true` - mode is set to `DEFERRABLE`\r\n *  - `false` - mode is set to `NOT DEFERRABLE`\r\n *\r\n * It is used only when `tiLevel`=`isolationLevel.serializable`\r\n * and `readOnly`=`true`, or else it is ignored.\r\n *\r\n * @returns {txMode.TransactionMode}\r\n *\r\n * @see $[BEGIN], {@link txMode.isolationLevel}\r\n *\r\n * @example\r\n *\r\n * const {TransactionMode, isolationLevel} = pgp.txMode;\r\n *\r\n * // Create a reusable transaction mode (serializable + read-only + deferrable):\r\n * const mode = new TransactionMode({\r\n *     tiLevel: isolationLevel.serializable,\r\n *     readOnly: true,\r\n *     deferrable: true\r\n * });\r\n *\r\n * db.tx({mode}, t => {\r\n *     return t.any('SELECT * FROM table');\r\n * })\r\n *     .then(data => {\r\n *         // success;\r\n *     })\r\n *     .catch(error => {\r\n *         // error\r\n *     });\r\n *\r\n * // Instead of the default BEGIN, such transaction will start with:\r\n *\r\n * // BEGIN ISOLATION LEVEL SERIALIZABLE READ ONLY DEFERRABLE\r\n *\r\n */\r\nclass TransactionMode extends InnerState {\r\n\r\n    constructor(options) {\r\n        options = assert(options, ['tiLevel', 'deferrable', 'readOnly']);\r\n        const {readOnly, deferrable} = options;\r\n        let {tiLevel} = options;\r\n        let level, accessMode, deferrableMode, begin = 'begin';\r\n        tiLevel = (tiLevel > 0) ? parseInt(tiLevel) : 0;\r\n\r\n        if (tiLevel > 0 && tiLevel < 4) {\r\n            const values = ['serializable', 'repeatable read', 'read committed'];\r\n            level = 'isolation level ' + values[tiLevel - 1];\r\n        }\r\n        if (readOnly) {\r\n            accessMode = 'read only';\r\n        } else {\r\n            if (readOnly !== undefined) {\r\n                accessMode = 'read write';\r\n            }\r\n        }\r\n        // From the official documentation: http://www.postgresql.org/docs/9.5/static/sql-set-transaction.html\r\n        // The DEFERRABLE transaction property has no effect unless the transaction is also SERIALIZABLE and READ ONLY\r\n        if (tiLevel === isolationLevel.serializable && readOnly) {\r\n            if (deferrable) {\r\n                deferrableMode = 'deferrable';\r\n            } else {\r\n                if (deferrable !== undefined) {\r\n                    deferrableMode = 'not deferrable';\r\n                }\r\n            }\r\n        }\r\n        if (level) {\r\n            begin += ' ' + level;\r\n        }\r\n        if (accessMode) {\r\n            begin += ' ' + accessMode;\r\n        }\r\n        if (deferrableMode) {\r\n            begin += ' ' + deferrableMode;\r\n        }\r\n\r\n        super({begin, capBegin: begin.toUpperCase()});\r\n    }\r\n\r\n    /**\r\n     * @method txMode.TransactionMode#begin\r\n     * @description\r\n     * Returns a complete BEGIN statement, according to all the parameters passed into the class.\r\n     *\r\n     * This method is primarily for internal use by the library.\r\n     *\r\n     * @param {boolean} [cap=false]\r\n     * Indicates whether the returned SQL must be capitalized.\r\n     *\r\n     * @returns {string}\r\n     */\r\n    begin(cap) {\r\n        return cap ? this._inner.capBegin : this._inner.begin;\r\n    }\r\n}\r\n\r\naddInspection(TransactionMode, function () {\r\n    return this.begin(true);\r\n});\r\n\r\n/**\r\n * @namespace txMode\r\n * @description\r\n * Transaction Mode namespace, available as `pgp.txMode`, before and after initializing the library.\r\n *\r\n * Extends the default `BEGIN` with Transaction Mode parameters:\r\n *  - isolation level\r\n *  - access mode\r\n *  - deferrable mode\r\n *\r\n * @property {function} TransactionMode\r\n * {@link txMode.TransactionMode TransactionMode} class constructor.\r\n *\r\n * @property {txMode.isolationLevel} isolationLevel\r\n * Transaction Isolation Level enumerator\r\n *\r\n * @see $[BEGIN]\r\n */\r\nmodule.exports = {\r\n    isolationLevel,\r\n    TransactionMode\r\n};\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}