{"ast":null,"code":"/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */\n\nconst {\n  ColorConsole\n} = require('./utils/color');\nconst npm = {\n  utils: require('./utils')\n};\n\n/**\r\n * @class DatabasePool\r\n * @static\r\n * @private\r\n */\nclass DatabasePool {\n  /**\r\n   * Global instance of the database pool repository.\r\n   *\r\n   * @returns {{dbMap: {}, dbs: Array}}\r\n   */\n  static get instance() {\n    const s = Symbol.for('pgPromiseDatabasePool');\n    let scope = global[s];\n    if (!scope) {\n      scope = {\n        dbMap: {},\n        // map of used database context keys (connection + dc)\n        dbs: [] // all database objects\n      };\n\n      global[s] = scope;\n    }\n    return scope;\n  }\n\n  /**\r\n   * @method DatabasePool.register\r\n   * @static\r\n   * @description\r\n   *  - Registers each database object, to make sure no duplicates connections are used,\r\n   *    and if they are, produce a warning;\r\n   *  - Registers each Pool object, to be able to release them all when requested.\r\n   *\r\n   * @param {Database} db - The new Database object being registered.\r\n   */\n  static register(db) {\n    const cnKey = DatabasePool.createContextKey(db);\n    npm.utils.addReadProp(db, '$cnKey', cnKey, true);\n    const {\n      dbMap,\n      dbs\n    } = DatabasePool.instance;\n    if (cnKey in dbMap) {\n      dbMap[cnKey]++;\n      /* istanbul ignore if */\n      if (!db.$config.options.noWarnings) {\n        ColorConsole.warn(`WARNING: Creating a duplicate database object for the same connection.\\n${npm.utils.getLocalStack(4, 3)}\\n`);\n      }\n    } else {\n      dbMap[cnKey] = 1;\n    }\n    dbs.push(db);\n  }\n\n  /**\r\n   * @method DatabasePool.unregister\r\n   * @static\r\n   * @param db\r\n   */\n  static unregister(db) {\n    const cnKey = db.$cnKey;\n    const {\n      dbMap\n    } = DatabasePool.instance;\n    if (! --dbMap[cnKey]) {\n      delete dbMap[cnKey];\n    }\n  }\n\n  /**\r\n   * @method DatabasePool.shutDown\r\n   * @static\r\n   */\n  static shutDown() {\n    const {\n      instance\n    } = DatabasePool;\n    instance.dbs.forEach(db => {\n      db.$destroy();\n    });\n    instance.dbs.length = 0;\n    instance.dbMap = {};\n  }\n\n  /**\r\n   * @method DatabasePool.createContextKey\r\n   * @static\r\n   * @description\r\n   * For connections that are objects it reorders the keys alphabetically,\r\n   * and then serializes the result into a JSON string.\r\n   *\r\n   * @param {Database} db - Database instance.\r\n   */\n  static createContextKey(db) {\n    let cn = db.$cn;\n    if (typeof cn === 'object') {\n      const obj = {},\n        keys = Object.keys(cn).sort();\n      keys.forEach(name => {\n        obj[name] = cn[name];\n      });\n      cn = obj;\n    }\n    return npm.utils.toJson(npm.utils.getSafeConnection(cn)) + npm.utils.toJson(db.$dc);\n  }\n}\nmodule.exports = {\n  DatabasePool\n};","map":{"version":3,"names":["ColorConsole","require","npm","utils","DatabasePool","instance","s","Symbol","for","scope","global","dbMap","dbs","register","db","cnKey","createContextKey","addReadProp","$config","options","noWarnings","warn","getLocalStack","push","unregister","$cnKey","shutDown","forEach","$destroy","length","cn","$cn","obj","keys","Object","sort","name","toJson","getSafeConnection","$dc","module","exports"],"sources":["/Users/luna/Library/Mobile Documents/com~apple~CloudDocs/GitHub/paucamcal.github.io/AESP/node_modules/pg-promise/lib/database-pool.js"],"sourcesContent":["/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */\r\n\r\nconst {ColorConsole} = require('./utils/color');\r\n\r\nconst npm = {\r\n    utils: require('./utils')\r\n};\r\n\r\n/**\r\n * @class DatabasePool\r\n * @static\r\n * @private\r\n */\r\nclass DatabasePool {\r\n\r\n    /**\r\n     * Global instance of the database pool repository.\r\n     *\r\n     * @returns {{dbMap: {}, dbs: Array}}\r\n     */\r\n    static get instance() {\r\n        const s = Symbol.for('pgPromiseDatabasePool');\r\n        let scope = global[s];\r\n        if (!scope) {\r\n            scope = {\r\n                dbMap: {}, // map of used database context keys (connection + dc)\r\n                dbs: [] // all database objects\r\n            };\r\n            global[s] = scope;\r\n        }\r\n        return scope;\r\n    }\r\n\r\n    /**\r\n     * @method DatabasePool.register\r\n     * @static\r\n     * @description\r\n     *  - Registers each database object, to make sure no duplicates connections are used,\r\n     *    and if they are, produce a warning;\r\n     *  - Registers each Pool object, to be able to release them all when requested.\r\n     *\r\n     * @param {Database} db - The new Database object being registered.\r\n     */\r\n    static register(db) {\r\n        const cnKey = DatabasePool.createContextKey(db);\r\n        npm.utils.addReadProp(db, '$cnKey', cnKey, true);\r\n        const {dbMap, dbs} = DatabasePool.instance;\r\n        if (cnKey in dbMap) {\r\n            dbMap[cnKey]++;\r\n            /* istanbul ignore if */\r\n            if (!db.$config.options.noWarnings) {\r\n                ColorConsole.warn(`WARNING: Creating a duplicate database object for the same connection.\\n${npm.utils.getLocalStack(4, 3)}\\n`);\r\n            }\r\n        } else {\r\n            dbMap[cnKey] = 1;\r\n        }\r\n        dbs.push(db);\r\n    }\r\n\r\n    /**\r\n     * @method DatabasePool.unregister\r\n     * @static\r\n     * @param db\r\n     */\r\n    static unregister(db) {\r\n        const cnKey = db.$cnKey;\r\n        const {dbMap} = DatabasePool.instance;\r\n        if (!--dbMap[cnKey]) {\r\n            delete dbMap[cnKey];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @method DatabasePool.shutDown\r\n     * @static\r\n     */\r\n    static shutDown() {\r\n        const {instance} = DatabasePool;\r\n        instance.dbs.forEach(db => {\r\n            db.$destroy();\r\n        });\r\n        instance.dbs.length = 0;\r\n        instance.dbMap = {};\r\n    }\r\n\r\n    /**\r\n     * @method DatabasePool.createContextKey\r\n     * @static\r\n     * @description\r\n     * For connections that are objects it reorders the keys alphabetically,\r\n     * and then serializes the result into a JSON string.\r\n     *\r\n     * @param {Database} db - Database instance.\r\n     */\r\n    static createContextKey(db) {\r\n        let cn = db.$cn;\r\n        if (typeof cn === 'object') {\r\n            const obj = {}, keys = Object.keys(cn).sort();\r\n            keys.forEach(name => {\r\n                obj[name] = cn[name];\r\n            });\r\n            cn = obj;\r\n        }\r\n        return npm.utils.toJson(npm.utils.getSafeConnection(cn)) + npm.utils.toJson(db.$dc);\r\n    }\r\n}\r\n\r\nmodule.exports = {DatabasePool};\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAM;EAACA;AAAY,CAAC,GAAGC,OAAO,CAAC,eAAe,CAAC;AAE/C,MAAMC,GAAG,GAAG;EACRC,KAAK,EAAEF,OAAO,CAAC,SAAS;AAC5B,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,MAAMG,YAAY,CAAC;EAEf;AACJ;AACA;AACA;AACA;EACI,WAAWC,QAAQA,CAAA,EAAG;IAClB,MAAMC,CAAC,GAAGC,MAAM,CAACC,GAAG,CAAC,uBAAuB,CAAC;IAC7C,IAAIC,KAAK,GAAGC,MAAM,CAACJ,CAAC,CAAC;IACrB,IAAI,CAACG,KAAK,EAAE;MACRA,KAAK,GAAG;QACJE,KAAK,EAAE,CAAC,CAAC;QAAE;QACXC,GAAG,EAAE,EAAE,CAAC;MACZ,CAAC;;MACDF,MAAM,CAACJ,CAAC,CAAC,GAAGG,KAAK;IACrB;IACA,OAAOA,KAAK;EAChB;;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,OAAOI,QAAQA,CAACC,EAAE,EAAE;IAChB,MAAMC,KAAK,GAAGX,YAAY,CAACY,gBAAgB,CAACF,EAAE,CAAC;IAC/CZ,GAAG,CAACC,KAAK,CAACc,WAAW,CAACH,EAAE,EAAE,QAAQ,EAAEC,KAAK,EAAE,IAAI,CAAC;IAChD,MAAM;MAACJ,KAAK;MAAEC;IAAG,CAAC,GAAGR,YAAY,CAACC,QAAQ;IAC1C,IAAIU,KAAK,IAAIJ,KAAK,EAAE;MAChBA,KAAK,CAACI,KAAK,CAAC,EAAE;MACd;MACA,IAAI,CAACD,EAAE,CAACI,OAAO,CAACC,OAAO,CAACC,UAAU,EAAE;QAChCpB,YAAY,CAACqB,IAAI,CAAE,2EAA0EnB,GAAG,CAACC,KAAK,CAACmB,aAAa,CAAC,CAAC,EAAE,CAAC,CAAE,IAAG,CAAC;MACnI;IACJ,CAAC,MAAM;MACHX,KAAK,CAACI,KAAK,CAAC,GAAG,CAAC;IACpB;IACAH,GAAG,CAACW,IAAI,CAACT,EAAE,CAAC;EAChB;;EAEA;AACJ;AACA;AACA;AACA;EACI,OAAOU,UAAUA,CAACV,EAAE,EAAE;IAClB,MAAMC,KAAK,GAAGD,EAAE,CAACW,MAAM;IACvB,MAAM;MAACd;IAAK,CAAC,GAAGP,YAAY,CAACC,QAAQ;IACrC,IAAI,CAAC,GAAEM,KAAK,CAACI,KAAK,CAAC,EAAE;MACjB,OAAOJ,KAAK,CAACI,KAAK,CAAC;IACvB;EACJ;;EAEA;AACJ;AACA;AACA;EACI,OAAOW,QAAQA,CAAA,EAAG;IACd,MAAM;MAACrB;IAAQ,CAAC,GAAGD,YAAY;IAC/BC,QAAQ,CAACO,GAAG,CAACe,OAAO,CAACb,EAAE,IAAI;MACvBA,EAAE,CAACc,QAAQ,CAAC,CAAC;IACjB,CAAC,CAAC;IACFvB,QAAQ,CAACO,GAAG,CAACiB,MAAM,GAAG,CAAC;IACvBxB,QAAQ,CAACM,KAAK,GAAG,CAAC,CAAC;EACvB;;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,OAAOK,gBAAgBA,CAACF,EAAE,EAAE;IACxB,IAAIgB,EAAE,GAAGhB,EAAE,CAACiB,GAAG;IACf,IAAI,OAAOD,EAAE,KAAK,QAAQ,EAAE;MACxB,MAAME,GAAG,GAAG,CAAC,CAAC;QAAEC,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACH,EAAE,CAAC,CAACK,IAAI,CAAC,CAAC;MAC7CF,IAAI,CAACN,OAAO,CAACS,IAAI,IAAI;QACjBJ,GAAG,CAACI,IAAI,CAAC,GAAGN,EAAE,CAACM,IAAI,CAAC;MACxB,CAAC,CAAC;MACFN,EAAE,GAAGE,GAAG;IACZ;IACA,OAAO9B,GAAG,CAACC,KAAK,CAACkC,MAAM,CAACnC,GAAG,CAACC,KAAK,CAACmC,iBAAiB,CAACR,EAAE,CAAC,CAAC,GAAG5B,GAAG,CAACC,KAAK,CAACkC,MAAM,CAACvB,EAAE,CAACyB,GAAG,CAAC;EACvF;AACJ;AAEAC,MAAM,CAACC,OAAO,GAAG;EAACrC;AAAY,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}