{"ast":null,"code":"/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */\n\nconst {\n  TableName\n} = require('../table-name');\nconst {\n  ColumnSet\n} = require('../column-set');\nconst npm = {\n  formatting: require('../../formatting'),\n  utils: require('../../utils')\n};\n\n/**\r\n * @method helpers.insert\r\n * @description\r\n * Generates an `INSERT` query for either one object or an array of objects.\r\n *\r\n * @param {object|object[]} data\r\n * An insert object with properties for insert values, or an array of such objects.\r\n *\r\n * When `data` is not a non-null object and not an array, it will throw {@link external:TypeError TypeError} = `Invalid parameter 'data' specified.`\r\n *\r\n * When `data` is an empty array, it will throw {@link external:TypeError TypeError} = `Cannot generate an INSERT from an empty array.`\r\n *\r\n * When `data` is an array that contains a non-object value, the method will throw {@link external:Error Error} =\r\n * `Invalid insert object at index N.`\r\n *\r\n * @param {array|helpers.Column|helpers.ColumnSet} [columns]\r\n * Set of columns to be inserted.\r\n *\r\n * It is optional when `data` is a single object, and required when `data` is an array of objects. If not specified for an array\r\n * of objects, the method will throw {@link external:TypeError TypeError} = `Parameter 'columns' is required when inserting multiple records.`\r\n *\r\n * When `columns` is not a {@link helpers.ColumnSet ColumnSet} object, a temporary {@link helpers.ColumnSet ColumnSet}\r\n * is created - from the value of `columns` (if it was specified), or from the value of `data` (if it is not an array).\r\n *\r\n * When the final {@link helpers.ColumnSet ColumnSet} is empty (no columns in it), the method will throw\r\n * {@link external:Error Error} = `Cannot generate an INSERT without any columns.`\r\n *\r\n * @param {helpers.TableName|string|{table,schema}} [table]\r\n * Destination table.\r\n *\r\n * It is normally a required parameter. But when `columns` is passed in as a {@link helpers.ColumnSet ColumnSet} object\r\n * with `table` set in it, that will be used when this parameter isn't specified. When neither is available, the method\r\n * will throw {@link external:Error Error} = `Table name is unknown.`\r\n *\r\n * @returns {string}\r\n * An `INSERT` query string.\r\n *\r\n * @see\r\n *  {@link helpers.Column Column},\r\n *  {@link helpers.ColumnSet ColumnSet},\r\n *  {@link helpers.TableName TableName}\r\n *\r\n * @example\r\n *\r\n * const pgp = require('pg-promise')({\r\n *    capSQL: true // if you want all generated SQL capitalized\r\n * });\r\n *\r\n * const dataSingle = {val: 123, msg: 'hello'};\r\n * const dataMulti = [{val: 123, msg: 'hello'}, {val: 456, msg: 'world!'}];\r\n *\r\n * // Column details can be taken from the data object:\r\n *\r\n * pgp.helpers.insert(dataSingle, null, 'my-table');\r\n * //=> INSERT INTO \"my-table\"(\"val\",\"msg\") VALUES(123,'hello')\r\n *\r\n * @example\r\n *\r\n * // Column details are required for a multi-row `INSERT`:\r\n *\r\n * pgp.helpers.insert(dataMulti, ['val', 'msg'], 'my-table');\r\n * //=> INSERT INTO \"my-table\"(\"val\",\"msg\") VALUES(123,'hello'),(456,'world!')\r\n *\r\n * @example\r\n *\r\n * // Column details from a reusable ColumnSet (recommended for performance):\r\n *\r\n * const cs = new pgp.helpers.ColumnSet(['val', 'msg'], {table: 'my-table'});\r\n *\r\n * pgp.helpers.insert(dataMulti, cs);\r\n * //=> INSERT INTO \"my-table\"(\"val\",\"msg\") VALUES(123,'hello'),(456,'world!')\r\n *\r\n */\nfunction insert(data, columns, table, capSQL) {\n  if (!data || typeof data !== 'object') {\n    throw new TypeError('Invalid parameter \\'data\\' specified.');\n  }\n  const isArray = Array.isArray(data);\n  if (isArray && !data.length) {\n    throw new TypeError('Cannot generate an INSERT from an empty array.');\n  }\n  if (columns instanceof ColumnSet) {\n    if (npm.utils.isNull(table)) {\n      table = columns.table;\n    }\n  } else {\n    if (isArray && npm.utils.isNull(columns)) {\n      throw new TypeError('Parameter \\'columns\\' is required when inserting multiple records.');\n    }\n    columns = new ColumnSet(columns || data);\n  }\n  if (!columns.columns.length) {\n    throw new Error('Cannot generate an INSERT without any columns.');\n  }\n  if (!table) {\n    throw new Error('Table name is unknown.');\n  }\n  if (!(table instanceof TableName)) {\n    table = new TableName(table);\n  }\n  let query = capSQL ? sql.capCase : sql.lowCase;\n  const fmOptions = {\n    capSQL\n  };\n  const format = npm.formatting.as.format;\n  query = format(query, [table.name, columns.names], fmOptions);\n  if (isArray) {\n    return query + data.map((d, index) => {\n      if (!d || typeof d !== 'object') {\n        throw new Error(`Invalid insert object at index ${index}.`);\n      }\n      return '(' + format(columns.variables, columns.prepare(d), fmOptions) + ')';\n    }).join();\n  }\n  return query + '(' + format(columns.variables, columns.prepare(data), fmOptions) + ')';\n}\nconst sql = {\n  lowCase: 'insert into $1^($2^) values',\n  capCase: 'INSERT INTO $1^($2^) VALUES'\n};\nmodule.exports = {\n  insert\n};","map":{"version":3,"names":["TableName","require","ColumnSet","npm","formatting","utils","insert","data","columns","table","capSQL","TypeError","isArray","Array","length","isNull","Error","query","sql","capCase","lowCase","fmOptions","format","as","name","names","map","d","index","variables","prepare","join","module","exports"],"sources":["/Users/luna/Library/Mobile Documents/com~apple~CloudDocs/GitHub/paucamcal.github.io/AESP/node_modules/pg-promise/lib/helpers/methods/insert.js"],"sourcesContent":["/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */\r\n\r\nconst {TableName} = require('../table-name');\r\nconst {ColumnSet} = require('../column-set');\r\n\r\nconst npm = {\r\n    formatting: require('../../formatting'),\r\n    utils: require('../../utils')\r\n};\r\n\r\n/**\r\n * @method helpers.insert\r\n * @description\r\n * Generates an `INSERT` query for either one object or an array of objects.\r\n *\r\n * @param {object|object[]} data\r\n * An insert object with properties for insert values, or an array of such objects.\r\n *\r\n * When `data` is not a non-null object and not an array, it will throw {@link external:TypeError TypeError} = `Invalid parameter 'data' specified.`\r\n *\r\n * When `data` is an empty array, it will throw {@link external:TypeError TypeError} = `Cannot generate an INSERT from an empty array.`\r\n *\r\n * When `data` is an array that contains a non-object value, the method will throw {@link external:Error Error} =\r\n * `Invalid insert object at index N.`\r\n *\r\n * @param {array|helpers.Column|helpers.ColumnSet} [columns]\r\n * Set of columns to be inserted.\r\n *\r\n * It is optional when `data` is a single object, and required when `data` is an array of objects. If not specified for an array\r\n * of objects, the method will throw {@link external:TypeError TypeError} = `Parameter 'columns' is required when inserting multiple records.`\r\n *\r\n * When `columns` is not a {@link helpers.ColumnSet ColumnSet} object, a temporary {@link helpers.ColumnSet ColumnSet}\r\n * is created - from the value of `columns` (if it was specified), or from the value of `data` (if it is not an array).\r\n *\r\n * When the final {@link helpers.ColumnSet ColumnSet} is empty (no columns in it), the method will throw\r\n * {@link external:Error Error} = `Cannot generate an INSERT without any columns.`\r\n *\r\n * @param {helpers.TableName|string|{table,schema}} [table]\r\n * Destination table.\r\n *\r\n * It is normally a required parameter. But when `columns` is passed in as a {@link helpers.ColumnSet ColumnSet} object\r\n * with `table` set in it, that will be used when this parameter isn't specified. When neither is available, the method\r\n * will throw {@link external:Error Error} = `Table name is unknown.`\r\n *\r\n * @returns {string}\r\n * An `INSERT` query string.\r\n *\r\n * @see\r\n *  {@link helpers.Column Column},\r\n *  {@link helpers.ColumnSet ColumnSet},\r\n *  {@link helpers.TableName TableName}\r\n *\r\n * @example\r\n *\r\n * const pgp = require('pg-promise')({\r\n *    capSQL: true // if you want all generated SQL capitalized\r\n * });\r\n *\r\n * const dataSingle = {val: 123, msg: 'hello'};\r\n * const dataMulti = [{val: 123, msg: 'hello'}, {val: 456, msg: 'world!'}];\r\n *\r\n * // Column details can be taken from the data object:\r\n *\r\n * pgp.helpers.insert(dataSingle, null, 'my-table');\r\n * //=> INSERT INTO \"my-table\"(\"val\",\"msg\") VALUES(123,'hello')\r\n *\r\n * @example\r\n *\r\n * // Column details are required for a multi-row `INSERT`:\r\n *\r\n * pgp.helpers.insert(dataMulti, ['val', 'msg'], 'my-table');\r\n * //=> INSERT INTO \"my-table\"(\"val\",\"msg\") VALUES(123,'hello'),(456,'world!')\r\n *\r\n * @example\r\n *\r\n * // Column details from a reusable ColumnSet (recommended for performance):\r\n *\r\n * const cs = new pgp.helpers.ColumnSet(['val', 'msg'], {table: 'my-table'});\r\n *\r\n * pgp.helpers.insert(dataMulti, cs);\r\n * //=> INSERT INTO \"my-table\"(\"val\",\"msg\") VALUES(123,'hello'),(456,'world!')\r\n *\r\n */\r\nfunction insert(data, columns, table, capSQL) {\r\n\r\n    if (!data || typeof data !== 'object') {\r\n        throw new TypeError('Invalid parameter \\'data\\' specified.');\r\n    }\r\n\r\n    const isArray = Array.isArray(data);\r\n\r\n    if (isArray && !data.length) {\r\n        throw new TypeError('Cannot generate an INSERT from an empty array.');\r\n    }\r\n\r\n    if (columns instanceof ColumnSet) {\r\n        if (npm.utils.isNull(table)) {\r\n            table = columns.table;\r\n        }\r\n    } else {\r\n        if (isArray && npm.utils.isNull(columns)) {\r\n            throw new TypeError('Parameter \\'columns\\' is required when inserting multiple records.');\r\n        }\r\n        columns = new ColumnSet(columns || data);\r\n    }\r\n\r\n    if (!columns.columns.length) {\r\n        throw new Error('Cannot generate an INSERT without any columns.');\r\n    }\r\n\r\n    if (!table) {\r\n        throw new Error('Table name is unknown.');\r\n    }\r\n\r\n    if (!(table instanceof TableName)) {\r\n        table = new TableName(table);\r\n    }\r\n\r\n    let query = capSQL ? sql.capCase : sql.lowCase;\r\n    const fmOptions = {capSQL};\r\n\r\n    const format = npm.formatting.as.format;\r\n    query = format(query, [table.name, columns.names], fmOptions);\r\n\r\n    if (isArray) {\r\n        return query + data.map((d, index) => {\r\n            if (!d || typeof d !== 'object') {\r\n                throw new Error(`Invalid insert object at index ${index}.`);\r\n            }\r\n            return '(' + format(columns.variables, columns.prepare(d), fmOptions) + ')';\r\n        }).join();\r\n    }\r\n    return query + '(' + format(columns.variables, columns.prepare(data), fmOptions) + ')';\r\n}\r\n\r\nconst sql = {\r\n    lowCase: 'insert into $1^($2^) values',\r\n    capCase: 'INSERT INTO $1^($2^) VALUES'\r\n};\r\n\r\nmodule.exports = {insert};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}