{"ast":null,"code":"/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */\n\nconst {\n  QueryFile\n} = require('../../query-file');\nconst npm = {\n  formatting: require('../../formatting')\n};\n\n/**\r\n * @method helpers.concat\r\n * @description\r\n * Formats and concatenates multiple queries into a single query string.\r\n *\r\n * Before joining the queries, the method does the following:\r\n *  - Formats each query, if `values` are provided;\r\n *  - Removes all leading and trailing spaces, tabs and semi-colons;\r\n *  - Automatically skips all empty queries.\r\n *\r\n * @param {array<string|helpers.QueryFormat|QueryFile>} queries\r\n * Array of mixed-type elements:\r\n * - a simple query string, to be used as is\r\n * - a {@link helpers.QueryFormat QueryFormat}-like object = `{query, [values], [options]}`\r\n * - a {@link QueryFile} object\r\n *\r\n * @returns {string}\r\n * Concatenated string with all queries.\r\n *\r\n * @example\r\n *\r\n * const pgp = require('pg-promise')();\r\n *\r\n * const qf1 = new pgp.QueryFile('./query1.sql', {minify: true});\r\n * const qf2 = new pgp.QueryFile('./query2.sql', {minify: true});\r\n *\r\n * const query = pgp.helpers.concat([\r\n *     {query: 'INSERT INTO Users(name, age) VALUES($1, $2)', values: ['John', 23]}, // QueryFormat-like object\r\n *     {query: qf1, values: [1, 'Name']}, // QueryFile with formatting parameters\r\n *     'SELECT count(*) FROM Users', // a simple-string query,\r\n *     qf2 // direct QueryFile object\r\n * ]);\r\n *\r\n * // query = concatenated string with all the queries\r\n */\nfunction concat(queries, capSQL) {\n  if (!Array.isArray(queries)) {\n    throw new TypeError('Parameter \\'queries\\' must be an array.');\n  }\n  const fmOptions = {\n    capSQL\n  };\n  const all = queries.map((q, index) => {\n    if (typeof q === 'string') {\n      // a simple query string without parameters:\n      return clean(q);\n    }\n    if (q && typeof q === 'object') {\n      if (q instanceof QueryFile) {\n        // QueryFile object:\n        return clean(q[npm.formatting.as.ctf.toPostgres]());\n      }\n      if ('query' in q) {\n        // object {query, values, options}:\n        let opt = q.options && typeof q.options === 'object' ? q.options : {};\n        opt = opt.capSQL === undefined ? Object.assign(opt, fmOptions) : opt;\n        return clean(npm.formatting.as.format(q.query, q.values, opt));\n      }\n    }\n    throw new Error(`Invalid query element at index ${index}.`);\n  });\n  return all.filter(q => q).join(';');\n}\nfunction clean(q) {\n  // removes from the query all leading and trailing symbols ' ', '\\t' and ';'\n  return q.replace(/^[\\s;]*|[\\s;]*$/g, '');\n}\nmodule.exports = {\n  concat\n};\n\n/**\r\n * @typedef helpers.QueryFormat\r\n * @description\r\n * A simple structure of parameters to be passed into method {@link formatting.format as.format} exactly as they are,\r\n * used by {@link helpers.concat}.\r\n *\r\n * @property {string|value|object} query\r\n * A query string or a value/object that implements $[Custom Type Formatting], to be formatted according to `values`.\r\n *\r\n * @property {array|object|value} [values]\r\n * Query-formatting values.\r\n *\r\n * @property {object} [options]\r\n * Query-formatting options, as supported by method {@link formatting.format as.format}.\r\n *\r\n * @see\r\n * {@link formatting.format as.format}\r\n */","map":{"version":3,"names":["QueryFile","require","npm","formatting","concat","queries","capSQL","Array","isArray","TypeError","fmOptions","all","map","q","index","clean","as","ctf","toPostgres","opt","options","undefined","Object","assign","format","query","values","Error","filter","join","replace","module","exports"],"sources":["/Users/luna/Library/Mobile Documents/com~apple~CloudDocs/GitHub/paucamcal.github.io/AESP/node_modules/pg-promise/lib/helpers/methods/concat.js"],"sourcesContent":["/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */\r\n\r\nconst {QueryFile} = require('../../query-file');\r\n\r\nconst npm = {\r\n    formatting: require('../../formatting')\r\n};\r\n\r\n/**\r\n * @method helpers.concat\r\n * @description\r\n * Formats and concatenates multiple queries into a single query string.\r\n *\r\n * Before joining the queries, the method does the following:\r\n *  - Formats each query, if `values` are provided;\r\n *  - Removes all leading and trailing spaces, tabs and semi-colons;\r\n *  - Automatically skips all empty queries.\r\n *\r\n * @param {array<string|helpers.QueryFormat|QueryFile>} queries\r\n * Array of mixed-type elements:\r\n * - a simple query string, to be used as is\r\n * - a {@link helpers.QueryFormat QueryFormat}-like object = `{query, [values], [options]}`\r\n * - a {@link QueryFile} object\r\n *\r\n * @returns {string}\r\n * Concatenated string with all queries.\r\n *\r\n * @example\r\n *\r\n * const pgp = require('pg-promise')();\r\n *\r\n * const qf1 = new pgp.QueryFile('./query1.sql', {minify: true});\r\n * const qf2 = new pgp.QueryFile('./query2.sql', {minify: true});\r\n *\r\n * const query = pgp.helpers.concat([\r\n *     {query: 'INSERT INTO Users(name, age) VALUES($1, $2)', values: ['John', 23]}, // QueryFormat-like object\r\n *     {query: qf1, values: [1, 'Name']}, // QueryFile with formatting parameters\r\n *     'SELECT count(*) FROM Users', // a simple-string query,\r\n *     qf2 // direct QueryFile object\r\n * ]);\r\n *\r\n * // query = concatenated string with all the queries\r\n */\r\nfunction concat(queries, capSQL) {\r\n    if (!Array.isArray(queries)) {\r\n        throw new TypeError('Parameter \\'queries\\' must be an array.');\r\n    }\r\n    const fmOptions = {capSQL};\r\n    const all = queries.map((q, index) => {\r\n        if (typeof q === 'string') {\r\n            // a simple query string without parameters:\r\n            return clean(q);\r\n        }\r\n        if (q && typeof q === 'object') {\r\n            if (q instanceof QueryFile) {\r\n                // QueryFile object:\r\n                return clean(q[npm.formatting.as.ctf.toPostgres]());\r\n            }\r\n            if ('query' in q) {\r\n                // object {query, values, options}:\r\n                let opt = q.options && typeof q.options === 'object' ? q.options : {};\r\n                opt = opt.capSQL === undefined ? Object.assign(opt, fmOptions) : opt;\r\n                return clean(npm.formatting.as.format(q.query, q.values, opt));\r\n            }\r\n        }\r\n        throw new Error(`Invalid query element at index ${index}.`);\r\n    });\r\n\r\n    return all.filter(q => q).join(';');\r\n}\r\n\r\nfunction clean(q) {\r\n    // removes from the query all leading and trailing symbols ' ', '\\t' and ';'\r\n    return q.replace(/^[\\s;]*|[\\s;]*$/g, '');\r\n}\r\n\r\nmodule.exports = {concat};\r\n\r\n/**\r\n * @typedef helpers.QueryFormat\r\n * @description\r\n * A simple structure of parameters to be passed into method {@link formatting.format as.format} exactly as they are,\r\n * used by {@link helpers.concat}.\r\n *\r\n * @property {string|value|object} query\r\n * A query string or a value/object that implements $[Custom Type Formatting], to be formatted according to `values`.\r\n *\r\n * @property {array|object|value} [values]\r\n * Query-formatting values.\r\n *\r\n * @property {object} [options]\r\n * Query-formatting options, as supported by method {@link formatting.format as.format}.\r\n *\r\n * @see\r\n * {@link formatting.format as.format}\r\n */\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAM;EAACA;AAAS,CAAC,GAAGC,OAAO,CAAC,kBAAkB,CAAC;AAE/C,MAAMC,GAAG,GAAG;EACRC,UAAU,EAAEF,OAAO,CAAC,kBAAkB;AAC1C,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASG,MAAMA,CAACC,OAAO,EAAEC,MAAM,EAAE;EAC7B,IAAI,CAACC,KAAK,CAACC,OAAO,CAACH,OAAO,CAAC,EAAE;IACzB,MAAM,IAAII,SAAS,CAAC,yCAAyC,CAAC;EAClE;EACA,MAAMC,SAAS,GAAG;IAACJ;EAAM,CAAC;EAC1B,MAAMK,GAAG,GAAGN,OAAO,CAACO,GAAG,CAAC,CAACC,CAAC,EAAEC,KAAK,KAAK;IAClC,IAAI,OAAOD,CAAC,KAAK,QAAQ,EAAE;MACvB;MACA,OAAOE,KAAK,CAACF,CAAC,CAAC;IACnB;IACA,IAAIA,CAAC,IAAI,OAAOA,CAAC,KAAK,QAAQ,EAAE;MAC5B,IAAIA,CAAC,YAAYb,SAAS,EAAE;QACxB;QACA,OAAOe,KAAK,CAACF,CAAC,CAACX,GAAG,CAACC,UAAU,CAACa,EAAE,CAACC,GAAG,CAACC,UAAU,CAAC,CAAC,CAAC,CAAC;MACvD;MACA,IAAI,OAAO,IAAIL,CAAC,EAAE;QACd;QACA,IAAIM,GAAG,GAAGN,CAAC,CAACO,OAAO,IAAI,OAAOP,CAAC,CAACO,OAAO,KAAK,QAAQ,GAAGP,CAAC,CAACO,OAAO,GAAG,CAAC,CAAC;QACrED,GAAG,GAAGA,GAAG,CAACb,MAAM,KAAKe,SAAS,GAAGC,MAAM,CAACC,MAAM,CAACJ,GAAG,EAAET,SAAS,CAAC,GAAGS,GAAG;QACpE,OAAOJ,KAAK,CAACb,GAAG,CAACC,UAAU,CAACa,EAAE,CAACQ,MAAM,CAACX,CAAC,CAACY,KAAK,EAAEZ,CAAC,CAACa,MAAM,EAAEP,GAAG,CAAC,CAAC;MAClE;IACJ;IACA,MAAM,IAAIQ,KAAK,CAAE,kCAAiCb,KAAM,GAAE,CAAC;EAC/D,CAAC,CAAC;EAEF,OAAOH,GAAG,CAACiB,MAAM,CAACf,CAAC,IAAIA,CAAC,CAAC,CAACgB,IAAI,CAAC,GAAG,CAAC;AACvC;AAEA,SAASd,KAAKA,CAACF,CAAC,EAAE;EACd;EACA,OAAOA,CAAC,CAACiB,OAAO,CAAC,kBAAkB,EAAE,EAAE,CAAC;AAC5C;AAEAC,MAAM,CAACC,OAAO,GAAG;EAAC5B;AAAM,CAAC;;AAEzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"script","externalDependencies":[]}