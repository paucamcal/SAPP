{"ast":null,"code":"const npm = {\n  utils: require('./utils'),\n  batch: require('./ext/batch'),\n  page: require('./ext/page'),\n  sequence: require('./ext/sequence'),\n  stream: require('./ext/stream'),\n  errors: require('./errors')\n};\n\n/**\r\n * @module spex\r\n * @summary Specialized Promise Extensions\r\n * @author Vitaly Tomilov\r\n *\r\n * @description\r\n * Attaches to an external promise library and provides additional methods built solely\r\n * on the basic promise operations:\r\n *  - construct a new promise with a callback function\r\n *  - resolve a promise with some result data\r\n *  - reject a promise with a reason\r\n *\r\n * ### usage\r\n * For any third-party promise library:\r\n * ```js\r\n * const promise = require('bluebird');\r\n * const spex = require('spex')(promise);\r\n * ```\r\n * For ES6 promises:\r\n * ```js\r\n * const spex = require('spex')(Promise);\r\n * ```\r\n *\r\n * @param {Object|Function} promiseLib\r\n * Instance of a promise library to be used by this module.\r\n *\r\n * Some implementations use `Promise` constructor to create a new promise, while\r\n * others use the module's function for it. Both types are supported the same.\r\n *\r\n * Alternatively, an object of type {@link PromiseAdapter} can be passed in, which provides\r\n * compatibility with any promise library outside of the standard.\r\n *\r\n * Passing in a promise library that cannot be recognized will throw\r\n * `Invalid promise library specified.`\r\n *\r\n * @returns {Object}\r\n * Namespace with all supported methods.\r\n *\r\n * @see {@link PromiseAdapter}, {@link batch}, {@link page}, {@link sequence}, {@link stream}\r\n */\nfunction main(promiseLib) {\n  const spex = {},\n    // library instance;\n    promise = parsePromiseLib(promiseLib); // promise library parsing;\n\n  const config = {\n    spex: spex,\n    promise: promise,\n    utils: npm.utils(promise)\n  };\n  spex.errors = npm.errors;\n  spex.batch = npm.batch(config);\n  spex.page = npm.page(config);\n  spex.sequence = npm.sequence(config);\n  spex.stream = npm.stream(config);\n  config.utils.extend(spex, '$p', promise);\n  Object.freeze(spex);\n  return spex;\n}\n\n//////////////////////////////////////////\n// Parses and validates a promise library;\nfunction parsePromiseLib(lib) {\n  if (lib) {\n    let promise;\n    if (lib instanceof main.PromiseAdapter) {\n      promise = function (func) {\n        return lib.create(func);\n      };\n      promise.resolve = lib.resolve;\n      promise.reject = lib.reject;\n      return promise;\n    }\n    const t = typeof lib;\n    if (t === 'function' || t === 'object') {\n      const Root = typeof lib.Promise === 'function' ? lib.Promise : lib;\n      promise = function (func) {\n        return new Root(func);\n      };\n      promise.resolve = Root.resolve;\n      promise.reject = Root.reject;\n      if (typeof promise.resolve === 'function' && typeof promise.reject === 'function') {\n        return promise;\n      }\n    }\n  }\n  throw new TypeError('Invalid promise library specified.');\n}\nmain.PromiseAdapter = require('./adapter');\nmain.errors = npm.errors;\nObject.freeze(main);\nmodule.exports = main;\n\n/**\r\n * @external Error\r\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\r\n */\n\n/**\r\n * @external TypeError\r\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError\r\n */\n\n/**\r\n * @external Promise\r\n * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Promise\r\n */","map":{"version":3,"names":["npm","utils","require","batch","page","sequence","stream","errors","main","promiseLib","spex","promise","parsePromiseLib","config","extend","Object","freeze","lib","PromiseAdapter","func","create","resolve","reject","t","Root","Promise","TypeError","module","exports"],"sources":["/Users/luna/Library/Mobile Documents/com~apple~CloudDocs/GitHub/paucamcal.github.io/AESP/node_modules/spex/lib/index.js"],"sourcesContent":["const npm = {\r\n    utils: require('./utils'),\r\n    batch: require('./ext/batch'),\r\n    page: require('./ext/page'),\r\n    sequence: require('./ext/sequence'),\r\n    stream: require('./ext/stream'),\r\n    errors: require('./errors')\r\n};\r\n\r\n/**\r\n * @module spex\r\n * @summary Specialized Promise Extensions\r\n * @author Vitaly Tomilov\r\n *\r\n * @description\r\n * Attaches to an external promise library and provides additional methods built solely\r\n * on the basic promise operations:\r\n *  - construct a new promise with a callback function\r\n *  - resolve a promise with some result data\r\n *  - reject a promise with a reason\r\n *\r\n * ### usage\r\n * For any third-party promise library:\r\n * ```js\r\n * const promise = require('bluebird');\r\n * const spex = require('spex')(promise);\r\n * ```\r\n * For ES6 promises:\r\n * ```js\r\n * const spex = require('spex')(Promise);\r\n * ```\r\n *\r\n * @param {Object|Function} promiseLib\r\n * Instance of a promise library to be used by this module.\r\n *\r\n * Some implementations use `Promise` constructor to create a new promise, while\r\n * others use the module's function for it. Both types are supported the same.\r\n *\r\n * Alternatively, an object of type {@link PromiseAdapter} can be passed in, which provides\r\n * compatibility with any promise library outside of the standard.\r\n *\r\n * Passing in a promise library that cannot be recognized will throw\r\n * `Invalid promise library specified.`\r\n *\r\n * @returns {Object}\r\n * Namespace with all supported methods.\r\n *\r\n * @see {@link PromiseAdapter}, {@link batch}, {@link page}, {@link sequence}, {@link stream}\r\n */\r\nfunction main(promiseLib) {\r\n\r\n    const spex = {}, // library instance;\r\n        promise = parsePromiseLib(promiseLib); // promise library parsing;\r\n\r\n    const config = {\r\n        spex: spex,\r\n        promise: promise,\r\n        utils: npm.utils(promise)\r\n    };\r\n\r\n    spex.errors = npm.errors;\r\n    spex.batch = npm.batch(config);\r\n    spex.page = npm.page(config);\r\n    spex.sequence = npm.sequence(config);\r\n    spex.stream = npm.stream(config);\r\n\r\n    config.utils.extend(spex, '$p', promise);\r\n\r\n    Object.freeze(spex);\r\n\r\n    return spex;\r\n}\r\n\r\n//////////////////////////////////////////\r\n// Parses and validates a promise library;\r\nfunction parsePromiseLib(lib) {\r\n    if (lib) {\r\n        let promise;\r\n        if (lib instanceof main.PromiseAdapter) {\r\n            promise = function (func) {\r\n                return lib.create(func);\r\n            };\r\n            promise.resolve = lib.resolve;\r\n            promise.reject = lib.reject;\r\n            return promise;\r\n        }\r\n        const t = typeof lib;\r\n        if (t === 'function' || t === 'object') {\r\n            const Root = typeof lib.Promise === 'function' ? lib.Promise : lib;\r\n            promise = function (func) {\r\n                return new Root(func);\r\n            };\r\n            promise.resolve = Root.resolve;\r\n            promise.reject = Root.reject;\r\n            if (typeof promise.resolve === 'function' && typeof promise.reject === 'function') {\r\n                return promise;\r\n            }\r\n        }\r\n    }\r\n    throw new TypeError('Invalid promise library specified.');\r\n}\r\n\r\nmain.PromiseAdapter = require('./adapter');\r\nmain.errors = npm.errors;\r\n\r\nObject.freeze(main);\r\n\r\nmodule.exports = main;\r\n\r\n/**\r\n * @external Error\r\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\r\n */\r\n\r\n/**\r\n * @external TypeError\r\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError\r\n */\r\n\r\n/**\r\n * @external Promise\r\n * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Promise\r\n */\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}