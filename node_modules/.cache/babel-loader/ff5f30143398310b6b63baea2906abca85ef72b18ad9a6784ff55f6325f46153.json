{"ast":null,"code":"/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */\n\n/*\r\n  The most important regular expressions and data as used by the library,\r\n  isolated here to help with possible edge cases during integration.\r\n*/\n\nmodule.exports = {\n  // Searches for all Named Parameters, supporting any of the following syntax:\n  // ${propName}, $(propName), $[propName], $/propName/, $<propName>\n  // Nested property names are also supported: ${propName.abc}\n  namedParameters: /\\$(?:({)|(\\()|(<)|(\\[)|(\\/))\\s*[a-zA-Z0-9$_.]+(\\^|~|#|:raw|:alias|:name|:json|:csv|:list|:value)?\\s*(?:(?=\\2)(?=\\3)(?=\\4)(?=\\5)}|(?=\\1)(?=\\3)(?=\\4)(?=\\5)\\)|(?=\\1)(?=\\2)(?=\\4)(?=\\5)>|(?=\\1)(?=\\2)(?=\\3)(?=\\5)]|(?=\\1)(?=\\2)(?=\\3)(?=\\4)\\/)/g,\n  // Searches for all variables $1, $2, ...$100000, and while it will find greater than $100000\n  // variables, the formatting engine is expected to throw an error for those.\n  multipleValues: /\\$([1-9][0-9]{0,16}(?![0-9])(\\^|~|#|:raw|:alias|:name|:json|:csv|:list|:value)?)/g,\n  // Searches for all occurrences of variable $1\n  singleValue: /\\$1(?![0-9])(\\^|~|#|:raw|:alias|:name|:json|:csv|:list|:value)?/g,\n  // Matches a valid column name for the Column type parser, according to the following rules:\n  // - can contain: any combination of a-z, A-Z, 0-9, $ or _\n  // - can contain ? at the start\n  // - can contain one of the supported filters/modifiers\n  validColumn: /\\??[a-zA-Z0-9$_]+(\\^|~|#|:raw|:alias|:name|:json|:csv|:list|:value)?/,\n  // Matches a valid open-name JavaScript variable, according to the following rules:\n  // - can contain: any combination of a-z, A-Z, 0-9, $ or _\n  validVariable: /[a-zA-Z0-9$_]+/,\n  // Matches a valid modifier in a column/property:\n  hasValidModifier: /\\^|~|#|:raw|:alias|:name|:json|:csv|:list|:value/,\n  // List of all supported formatting modifiers:\n  validModifiers: ['^', '~', '#', ':raw', ':alias', ':name', ':json', ':csv', ':list', ':value']\n};","map":{"version":3,"names":["module","exports","namedParameters","multipleValues","singleValue","validColumn","validVariable","hasValidModifier","validModifiers"],"sources":["/Users/luna/Library/Mobile Documents/com~apple~CloudDocs/GitHub/paucamcal.github.io/AESP/node_modules/pg-promise/lib/patterns.js"],"sourcesContent":["/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */\r\n\r\n/*\r\n  The most important regular expressions and data as used by the library,\r\n  isolated here to help with possible edge cases during integration.\r\n*/\r\n\r\nmodule.exports = {\r\n    // Searches for all Named Parameters, supporting any of the following syntax:\r\n    // ${propName}, $(propName), $[propName], $/propName/, $<propName>\r\n    // Nested property names are also supported: ${propName.abc}\r\n    namedParameters: /\\$(?:({)|(\\()|(<)|(\\[)|(\\/))\\s*[a-zA-Z0-9$_.]+(\\^|~|#|:raw|:alias|:name|:json|:csv|:list|:value)?\\s*(?:(?=\\2)(?=\\3)(?=\\4)(?=\\5)}|(?=\\1)(?=\\3)(?=\\4)(?=\\5)\\)|(?=\\1)(?=\\2)(?=\\4)(?=\\5)>|(?=\\1)(?=\\2)(?=\\3)(?=\\5)]|(?=\\1)(?=\\2)(?=\\3)(?=\\4)\\/)/g,\r\n\r\n    // Searches for all variables $1, $2, ...$100000, and while it will find greater than $100000\r\n    // variables, the formatting engine is expected to throw an error for those.\r\n    multipleValues: /\\$([1-9][0-9]{0,16}(?![0-9])(\\^|~|#|:raw|:alias|:name|:json|:csv|:list|:value)?)/g,\r\n\r\n    // Searches for all occurrences of variable $1\r\n    singleValue: /\\$1(?![0-9])(\\^|~|#|:raw|:alias|:name|:json|:csv|:list|:value)?/g,\r\n\r\n    // Matches a valid column name for the Column type parser, according to the following rules:\r\n    // - can contain: any combination of a-z, A-Z, 0-9, $ or _\r\n    // - can contain ? at the start\r\n    // - can contain one of the supported filters/modifiers\r\n    validColumn: /\\??[a-zA-Z0-9$_]+(\\^|~|#|:raw|:alias|:name|:json|:csv|:list|:value)?/,\r\n\r\n    // Matches a valid open-name JavaScript variable, according to the following rules:\r\n    // - can contain: any combination of a-z, A-Z, 0-9, $ or _\r\n    validVariable: /[a-zA-Z0-9$_]+/,\r\n\r\n    // Matches a valid modifier in a column/property:\r\n    hasValidModifier: /\\^|~|#|:raw|:alias|:name|:json|:csv|:list|:value/,\r\n\r\n    // List of all supported formatting modifiers:\r\n    validModifiers: ['^', '~', '#', ':raw', ':alias', ':name', ':json', ':csv', ':list', ':value']\r\n};\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEAA,MAAM,CAACC,OAAO,GAAG;EACb;EACA;EACA;EACAC,eAAe,EAAE,8OAA8O;EAE/P;EACA;EACAC,cAAc,EAAE,mFAAmF;EAEnG;EACAC,WAAW,EAAE,kEAAkE;EAE/E;EACA;EACA;EACA;EACAC,WAAW,EAAE,sEAAsE;EAEnF;EACA;EACAC,aAAa,EAAE,gBAAgB;EAE/B;EACAC,gBAAgB,EAAE,kDAAkD;EAEpE;EACAC,cAAc,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,MAAM,EAAE,QAAQ,EAAE,OAAO,EAAE,OAAO,EAAE,MAAM,EAAE,OAAO,EAAE,QAAQ;AACjG,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}