{"ast":null,"code":"/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */\n\nconst {\n  ColumnSet\n} = require('../column-set');\nconst npm = {\n  format: require('../../formatting').as.format,\n  utils: require('../../utils')\n};\n\n/**\r\n * @method helpers.sets\r\n * @description\r\n * Generates a string of comma-separated value-set statements from a single object: `col1=val1, col2=val2, ...`,\r\n * to be used as part of a query.\r\n *\r\n * Since it is to be used as part of `UPDATE` queries, {@link helpers.Column Column} properties `cnd` and `skip` apply.\r\n *\r\n * @param {object} data\r\n * A simple, non-null and non-array source object.\r\n *\r\n * If it is anything else, the method will throw {@link external:TypeError TypeError} = `Invalid parameter 'data' specified.`\r\n *\r\n * @param {array|helpers.Column|helpers.ColumnSet} [columns]\r\n * Columns for which to set values.\r\n *\r\n * When not specified, properties of the `data` object are used.\r\n *\r\n * When no effective columns are found, an empty string is returned.\r\n *\r\n * @returns {string}\r\n * - comma-separated value-set statements for the `data` object\r\n * - an empty string, if no effective columns found\r\n *\r\n * @see\r\n *  {@link helpers.Column Column},\r\n *  {@link helpers.ColumnSet ColumnSet}\r\n *\r\n * @example\r\n *\r\n * const pgp = require('pg-promise')();\r\n *\r\n * const data = {id: 1, val: 123, msg: 'hello'};\r\n *\r\n * // Properties can be pulled automatically from the object:\r\n *\r\n * pgp.helpers.sets(data);\r\n * //=> \"id\"=1,\"val\"=123,\"msg\"='hello'\r\n *\r\n * @example\r\n *\r\n * // Column details from a reusable ColumnSet (recommended for performance);\r\n * // NOTE: Conditional columns (start with '?') are skipped:\r\n *\r\n * const cs = new pgp.helpers.ColumnSet(['?id','val', 'msg']);\r\n *\r\n * pgp.helpers.sets(data, cs);\r\n * //=> \"val\"=123,\"msg\"='hello'\r\n *\r\n */\nfunction sets(data, columns, capSQL) {\n  if (!data || typeof data !== 'object' || Array.isArray(data)) {\n    throw new TypeError('Invalid parameter \\'data\\' specified.');\n  }\n  if (!(columns instanceof ColumnSet)) {\n    columns = new ColumnSet(columns || data);\n  }\n  return npm.format(columns.assign({\n    source: data\n  }), columns.prepare(data), {\n    capSQL\n  });\n}\nmodule.exports = {\n  sets\n};","map":{"version":3,"names":["ColumnSet","require","npm","format","as","utils","sets","data","columns","capSQL","Array","isArray","TypeError","assign","source","prepare","module","exports"],"sources":["/Users/luna/Library/Mobile Documents/com~apple~CloudDocs/GitHub/paucamcal.github.io/AESP/node_modules/pg-promise/lib/helpers/methods/sets.js"],"sourcesContent":["/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */\r\n\r\nconst {ColumnSet} = require('../column-set');\r\n\r\nconst npm = {\r\n    format: require('../../formatting').as.format,\r\n    utils: require('../../utils')\r\n};\r\n\r\n/**\r\n * @method helpers.sets\r\n * @description\r\n * Generates a string of comma-separated value-set statements from a single object: `col1=val1, col2=val2, ...`,\r\n * to be used as part of a query.\r\n *\r\n * Since it is to be used as part of `UPDATE` queries, {@link helpers.Column Column} properties `cnd` and `skip` apply.\r\n *\r\n * @param {object} data\r\n * A simple, non-null and non-array source object.\r\n *\r\n * If it is anything else, the method will throw {@link external:TypeError TypeError} = `Invalid parameter 'data' specified.`\r\n *\r\n * @param {array|helpers.Column|helpers.ColumnSet} [columns]\r\n * Columns for which to set values.\r\n *\r\n * When not specified, properties of the `data` object are used.\r\n *\r\n * When no effective columns are found, an empty string is returned.\r\n *\r\n * @returns {string}\r\n * - comma-separated value-set statements for the `data` object\r\n * - an empty string, if no effective columns found\r\n *\r\n * @see\r\n *  {@link helpers.Column Column},\r\n *  {@link helpers.ColumnSet ColumnSet}\r\n *\r\n * @example\r\n *\r\n * const pgp = require('pg-promise')();\r\n *\r\n * const data = {id: 1, val: 123, msg: 'hello'};\r\n *\r\n * // Properties can be pulled automatically from the object:\r\n *\r\n * pgp.helpers.sets(data);\r\n * //=> \"id\"=1,\"val\"=123,\"msg\"='hello'\r\n *\r\n * @example\r\n *\r\n * // Column details from a reusable ColumnSet (recommended for performance);\r\n * // NOTE: Conditional columns (start with '?') are skipped:\r\n *\r\n * const cs = new pgp.helpers.ColumnSet(['?id','val', 'msg']);\r\n *\r\n * pgp.helpers.sets(data, cs);\r\n * //=> \"val\"=123,\"msg\"='hello'\r\n *\r\n */\r\nfunction sets(data, columns, capSQL) {\r\n\r\n    if (!data || typeof data !== 'object' || Array.isArray(data)) {\r\n        throw new TypeError('Invalid parameter \\'data\\' specified.');\r\n    }\r\n\r\n    if (!(columns instanceof ColumnSet)) {\r\n        columns = new ColumnSet(columns || data);\r\n    }\r\n\r\n    return npm.format(columns.assign({source: data}), columns.prepare(data), {capSQL});\r\n}\r\n\r\nmodule.exports = {sets};\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAM;EAACA;AAAS,CAAC,GAAGC,OAAO,CAAC,eAAe,CAAC;AAE5C,MAAMC,GAAG,GAAG;EACRC,MAAM,EAAEF,OAAO,CAAC,kBAAkB,CAAC,CAACG,EAAE,CAACD,MAAM;EAC7CE,KAAK,EAAEJ,OAAO,CAAC,aAAa;AAChC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASK,IAAIA,CAACC,IAAI,EAAEC,OAAO,EAAEC,MAAM,EAAE;EAEjC,IAAI,CAACF,IAAI,IAAI,OAAOA,IAAI,KAAK,QAAQ,IAAIG,KAAK,CAACC,OAAO,CAACJ,IAAI,CAAC,EAAE;IAC1D,MAAM,IAAIK,SAAS,CAAC,uCAAuC,CAAC;EAChE;EAEA,IAAI,EAAEJ,OAAO,YAAYR,SAAS,CAAC,EAAE;IACjCQ,OAAO,GAAG,IAAIR,SAAS,CAACQ,OAAO,IAAID,IAAI,CAAC;EAC5C;EAEA,OAAOL,GAAG,CAACC,MAAM,CAACK,OAAO,CAACK,MAAM,CAAC;IAACC,MAAM,EAAEP;EAAI,CAAC,CAAC,EAAEC,OAAO,CAACO,OAAO,CAACR,IAAI,CAAC,EAAE;IAACE;EAAM,CAAC,CAAC;AACtF;AAEAO,MAAM,CAACC,OAAO,GAAG;EAACX;AAAI,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}