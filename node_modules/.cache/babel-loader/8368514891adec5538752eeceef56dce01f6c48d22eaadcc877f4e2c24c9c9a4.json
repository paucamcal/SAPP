{"ast":null,"code":"/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */\n\nconst {\n  ColumnSet\n} = require('../column-set');\nconst npm = {\n  formatting: require('../../formatting'),\n  utils: require('../../utils')\n};\n\n/**\r\n * @method helpers.values\r\n * @description\r\n * Generates a string of comma-separated value groups from either one object or an array of objects,\r\n * to be used as part of a query:\r\n *\r\n * - from a single object: `(val_1, val_2, ...)`\r\n * - from an array of objects: `(val_11, val_12, ...), (val_21, val_22, ...)`\r\n *\r\n * @param {object|object[]} data\r\n * A source object with properties as values, or an array of such objects.\r\n *\r\n * If it is anything else, the method will throw {@link external:TypeError TypeError} = `Invalid parameter 'data' specified.`\r\n *\r\n * When `data` is an array that contains a non-object value, the method will throw {@link external:Error Error} =\r\n * `Invalid object at index N.`\r\n *\r\n * When `data` is an empty array, an empty string is returned.\r\n *\r\n * @param {array|helpers.Column|helpers.ColumnSet} [columns]\r\n * Columns for which to return values.\r\n *\r\n * It is optional when `data` is a single object, and required when `data` is an array of objects. If not specified for an array\r\n * of objects, the method will throw {@link external:TypeError TypeError} = `Parameter 'columns' is required when generating multi-row values.`\r\n *\r\n * When the final {@link helpers.ColumnSet ColumnSet} is empty (no columns in it), the method will throw\r\n * {@link external:Error Error} = `Cannot generate values without any columns.`\r\n *\r\n * @returns {string}\r\n * - comma-separated value groups, according to `data`\r\n * - an empty string, if `data` is an empty array\r\n *\r\n * @see\r\n *  {@link helpers.Column Column},\r\n *  {@link helpers.ColumnSet ColumnSet}\r\n *\r\n * @example\r\n *\r\n * const pgp = require('pg-promise')();\r\n *\r\n * const dataSingle = {val: 123, msg: 'hello'};\r\n * const dataMulti = [{val: 123, msg: 'hello'}, {val: 456, msg: 'world!'}];\r\n *\r\n * // Properties can be pulled automatically from a single object:\r\n *\r\n * pgp.helpers.values(dataSingle);\r\n * //=> (123,'hello')\r\n *\r\n * @example\r\n *\r\n * // Column details are required when using an array of objects:\r\n *\r\n * pgp.helpers.values(dataMulti, ['val', 'msg']);\r\n * //=> (123,'hello'),(456,'world!')\r\n *\r\n * @example\r\n *\r\n * // Column details from a reusable ColumnSet (recommended for performance):\r\n *\r\n * const cs = new pgp.helpers.ColumnSet(['val', 'msg']);\r\n *\r\n * pgp.helpers.values(dataMulti, cs);\r\n * //=> (123,'hello'),(456,'world!')\r\n *\r\n */\nfunction values(data, columns, capSQL) {\n  if (!data || typeof data !== 'object') {\n    throw new TypeError('Invalid parameter \\'data\\' specified.');\n  }\n  const isArray = Array.isArray(data);\n  if (!(columns instanceof ColumnSet)) {\n    if (isArray && npm.utils.isNull(columns)) {\n      throw new TypeError('Parameter \\'columns\\' is required when generating multi-row values.');\n    }\n    columns = new ColumnSet(columns || data);\n  }\n  if (!columns.columns.length) {\n    throw new Error('Cannot generate values without any columns.');\n  }\n  const format = npm.formatting.as.format,\n    fmOptions = {\n      capSQL\n    };\n  if (isArray) {\n    return data.map((d, index) => {\n      if (!d || typeof d !== 'object') {\n        throw new Error(`Invalid object at index ${index}.`);\n      }\n      return '(' + format(columns.variables, columns.prepare(d), fmOptions) + ')';\n    }).join();\n  }\n  return '(' + format(columns.variables, columns.prepare(data), fmOptions) + ')';\n}\nmodule.exports = {\n  values\n};","map":{"version":3,"names":["ColumnSet","require","npm","formatting","utils","values","data","columns","capSQL","TypeError","isArray","Array","isNull","length","Error","format","as","fmOptions","map","d","index","variables","prepare","join","module","exports"],"sources":["/Users/luna/Library/Mobile Documents/com~apple~CloudDocs/GitHub/paucamcal.github.io/AESP/node_modules/pg-promise/lib/helpers/methods/values.js"],"sourcesContent":["/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */\r\n\r\nconst {ColumnSet} = require('../column-set');\r\n\r\nconst npm = {\r\n    formatting: require('../../formatting'),\r\n    utils: require('../../utils')\r\n};\r\n\r\n/**\r\n * @method helpers.values\r\n * @description\r\n * Generates a string of comma-separated value groups from either one object or an array of objects,\r\n * to be used as part of a query:\r\n *\r\n * - from a single object: `(val_1, val_2, ...)`\r\n * - from an array of objects: `(val_11, val_12, ...), (val_21, val_22, ...)`\r\n *\r\n * @param {object|object[]} data\r\n * A source object with properties as values, or an array of such objects.\r\n *\r\n * If it is anything else, the method will throw {@link external:TypeError TypeError} = `Invalid parameter 'data' specified.`\r\n *\r\n * When `data` is an array that contains a non-object value, the method will throw {@link external:Error Error} =\r\n * `Invalid object at index N.`\r\n *\r\n * When `data` is an empty array, an empty string is returned.\r\n *\r\n * @param {array|helpers.Column|helpers.ColumnSet} [columns]\r\n * Columns for which to return values.\r\n *\r\n * It is optional when `data` is a single object, and required when `data` is an array of objects. If not specified for an array\r\n * of objects, the method will throw {@link external:TypeError TypeError} = `Parameter 'columns' is required when generating multi-row values.`\r\n *\r\n * When the final {@link helpers.ColumnSet ColumnSet} is empty (no columns in it), the method will throw\r\n * {@link external:Error Error} = `Cannot generate values without any columns.`\r\n *\r\n * @returns {string}\r\n * - comma-separated value groups, according to `data`\r\n * - an empty string, if `data` is an empty array\r\n *\r\n * @see\r\n *  {@link helpers.Column Column},\r\n *  {@link helpers.ColumnSet ColumnSet}\r\n *\r\n * @example\r\n *\r\n * const pgp = require('pg-promise')();\r\n *\r\n * const dataSingle = {val: 123, msg: 'hello'};\r\n * const dataMulti = [{val: 123, msg: 'hello'}, {val: 456, msg: 'world!'}];\r\n *\r\n * // Properties can be pulled automatically from a single object:\r\n *\r\n * pgp.helpers.values(dataSingle);\r\n * //=> (123,'hello')\r\n *\r\n * @example\r\n *\r\n * // Column details are required when using an array of objects:\r\n *\r\n * pgp.helpers.values(dataMulti, ['val', 'msg']);\r\n * //=> (123,'hello'),(456,'world!')\r\n *\r\n * @example\r\n *\r\n * // Column details from a reusable ColumnSet (recommended for performance):\r\n *\r\n * const cs = new pgp.helpers.ColumnSet(['val', 'msg']);\r\n *\r\n * pgp.helpers.values(dataMulti, cs);\r\n * //=> (123,'hello'),(456,'world!')\r\n *\r\n */\r\nfunction values(data, columns, capSQL) {\r\n\r\n    if (!data || typeof data !== 'object') {\r\n        throw new TypeError('Invalid parameter \\'data\\' specified.');\r\n    }\r\n\r\n    const isArray = Array.isArray(data);\r\n\r\n    if (!(columns instanceof ColumnSet)) {\r\n        if (isArray && npm.utils.isNull(columns)) {\r\n            throw new TypeError('Parameter \\'columns\\' is required when generating multi-row values.');\r\n        }\r\n        columns = new ColumnSet(columns || data);\r\n    }\r\n\r\n    if (!columns.columns.length) {\r\n        throw new Error('Cannot generate values without any columns.');\r\n    }\r\n\r\n    const format = npm.formatting.as.format,\r\n        fmOptions = {capSQL};\r\n\r\n    if (isArray) {\r\n        return data.map((d, index) => {\r\n            if (!d || typeof d !== 'object') {\r\n                throw new Error(`Invalid object at index ${index}.`);\r\n            }\r\n            return '(' + format(columns.variables, columns.prepare(d), fmOptions) + ')';\r\n        }).join();\r\n    }\r\n    return '(' + format(columns.variables, columns.prepare(data), fmOptions) + ')';\r\n}\r\n\r\nmodule.exports = {values};\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAM;EAACA;AAAS,CAAC,GAAGC,OAAO,CAAC,eAAe,CAAC;AAE5C,MAAMC,GAAG,GAAG;EACRC,UAAU,EAAEF,OAAO,CAAC,kBAAkB,CAAC;EACvCG,KAAK,EAAEH,OAAO,CAAC,aAAa;AAChC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASI,MAAMA,CAACC,IAAI,EAAEC,OAAO,EAAEC,MAAM,EAAE;EAEnC,IAAI,CAACF,IAAI,IAAI,OAAOA,IAAI,KAAK,QAAQ,EAAE;IACnC,MAAM,IAAIG,SAAS,CAAC,uCAAuC,CAAC;EAChE;EAEA,MAAMC,OAAO,GAAGC,KAAK,CAACD,OAAO,CAACJ,IAAI,CAAC;EAEnC,IAAI,EAAEC,OAAO,YAAYP,SAAS,CAAC,EAAE;IACjC,IAAIU,OAAO,IAAIR,GAAG,CAACE,KAAK,CAACQ,MAAM,CAACL,OAAO,CAAC,EAAE;MACtC,MAAM,IAAIE,SAAS,CAAC,qEAAqE,CAAC;IAC9F;IACAF,OAAO,GAAG,IAAIP,SAAS,CAACO,OAAO,IAAID,IAAI,CAAC;EAC5C;EAEA,IAAI,CAACC,OAAO,CAACA,OAAO,CAACM,MAAM,EAAE;IACzB,MAAM,IAAIC,KAAK,CAAC,6CAA6C,CAAC;EAClE;EAEA,MAAMC,MAAM,GAAGb,GAAG,CAACC,UAAU,CAACa,EAAE,CAACD,MAAM;IACnCE,SAAS,GAAG;MAACT;IAAM,CAAC;EAExB,IAAIE,OAAO,EAAE;IACT,OAAOJ,IAAI,CAACY,GAAG,CAAC,CAACC,CAAC,EAAEC,KAAK,KAAK;MAC1B,IAAI,CAACD,CAAC,IAAI,OAAOA,CAAC,KAAK,QAAQ,EAAE;QAC7B,MAAM,IAAIL,KAAK,CAAE,2BAA0BM,KAAM,GAAE,CAAC;MACxD;MACA,OAAO,GAAG,GAAGL,MAAM,CAACR,OAAO,CAACc,SAAS,EAAEd,OAAO,CAACe,OAAO,CAACH,CAAC,CAAC,EAAEF,SAAS,CAAC,GAAG,GAAG;IAC/E,CAAC,CAAC,CAACM,IAAI,CAAC,CAAC;EACb;EACA,OAAO,GAAG,GAAGR,MAAM,CAACR,OAAO,CAACc,SAAS,EAAEd,OAAO,CAACe,OAAO,CAAChB,IAAI,CAAC,EAAEW,SAAS,CAAC,GAAG,GAAG;AAClF;AAEAO,MAAM,CAACC,OAAO,GAAG;EAACpB;AAAM,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}