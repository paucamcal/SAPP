{"ast":null,"code":"/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */\n\nconst {\n  assert\n} = require('./assert');\n\n/**\r\n * @class PromiseAdapter\r\n * @summary Adapter for the primary promise operations.\r\n * @description\r\n * Provides compatibility with promise libraries that cannot be recognized automatically,\r\n * via functions that implement the primary operations with promises:\r\n *\r\n *  - construct a new promise with a callback function\r\n *  - resolve a promise with some result data\r\n *  - reject a promise with a reason\r\n *  - resolve an array of promises\r\n *\r\n * The type is available from the library's root: `pgp.PromiseAdapter`.\r\n *\r\n * @param {object} api\r\n * Promise API configuration object.\r\n *\r\n * Passing in anything other than an object will throw {@link external:TypeError TypeError} = `Adapter requires an api configuration object.`\r\n *\r\n * @param {function} api.create\r\n * A function that takes a callback parameter and returns a new promise object.\r\n * The callback parameter is expected to be `function(resolve, reject)`.\r\n *\r\n * Passing in anything other than a function will throw {@link external:TypeError TypeError} = `Function 'create' must be specified.`\r\n *\r\n * @param {function} api.resolve\r\n * A function that takes an optional data parameter and resolves a promise with it.\r\n *\r\n * Passing in anything other than a function will throw {@link external:TypeError TypeError} = `Function 'resolve' must be specified.`\r\n *\r\n * @param {function} api.reject\r\n * A function that takes an optional error parameter and rejects a promise with it.\r\n *\r\n * Passing in anything other than a function will throw {@link external:TypeError TypeError} = `Function 'reject' must be specified.`\r\n *\r\n * @param {function} api.all\r\n * A function that resolves an array of promises.\r\n *\r\n * Passing in anything other than a function will throw {@link external:TypeError TypeError} = `Function 'all' must be specified.`\r\n *\r\n * @returns {PromiseAdapter}\r\n */\nclass PromiseAdapter {\n  constructor(api) {\n    if (!api || typeof api !== 'object') {\n      throw new TypeError('Adapter requires an api configuration object.');\n    }\n    api = assert(api, ['create', 'resolve', 'reject', 'all']);\n    this.create = api.create;\n    this.resolve = api.resolve;\n    this.reject = api.reject;\n    this.all = api.all;\n    if (typeof this.create !== 'function') {\n      throw new TypeError('Function \\'create\\' must be specified.');\n    }\n    if (typeof this.resolve !== 'function') {\n      throw new TypeError('Function \\'resolve\\' must be specified.');\n    }\n    if (typeof this.reject !== 'function') {\n      throw new TypeError('Function \\'reject\\' must be specified.');\n    }\n    if (typeof this.all !== 'function') {\n      throw new TypeError('Function \\'all\\' must be specified.');\n    }\n  }\n}\nmodule.exports = {\n  PromiseAdapter\n};","map":{"version":3,"names":["assert","require","PromiseAdapter","constructor","api","TypeError","create","resolve","reject","all","module","exports"],"sources":["/Users/luna/Library/Mobile Documents/com~apple~CloudDocs/GitHub/paucamcal.github.io/AESP/node_modules/pg-promise/lib/promise-adapter.js"],"sourcesContent":["/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */\r\n\r\nconst {assert} = require('./assert');\r\n\r\n/**\r\n * @class PromiseAdapter\r\n * @summary Adapter for the primary promise operations.\r\n * @description\r\n * Provides compatibility with promise libraries that cannot be recognized automatically,\r\n * via functions that implement the primary operations with promises:\r\n *\r\n *  - construct a new promise with a callback function\r\n *  - resolve a promise with some result data\r\n *  - reject a promise with a reason\r\n *  - resolve an array of promises\r\n *\r\n * The type is available from the library's root: `pgp.PromiseAdapter`.\r\n *\r\n * @param {object} api\r\n * Promise API configuration object.\r\n *\r\n * Passing in anything other than an object will throw {@link external:TypeError TypeError} = `Adapter requires an api configuration object.`\r\n *\r\n * @param {function} api.create\r\n * A function that takes a callback parameter and returns a new promise object.\r\n * The callback parameter is expected to be `function(resolve, reject)`.\r\n *\r\n * Passing in anything other than a function will throw {@link external:TypeError TypeError} = `Function 'create' must be specified.`\r\n *\r\n * @param {function} api.resolve\r\n * A function that takes an optional data parameter and resolves a promise with it.\r\n *\r\n * Passing in anything other than a function will throw {@link external:TypeError TypeError} = `Function 'resolve' must be specified.`\r\n *\r\n * @param {function} api.reject\r\n * A function that takes an optional error parameter and rejects a promise with it.\r\n *\r\n * Passing in anything other than a function will throw {@link external:TypeError TypeError} = `Function 'reject' must be specified.`\r\n *\r\n * @param {function} api.all\r\n * A function that resolves an array of promises.\r\n *\r\n * Passing in anything other than a function will throw {@link external:TypeError TypeError} = `Function 'all' must be specified.`\r\n *\r\n * @returns {PromiseAdapter}\r\n */\r\nclass PromiseAdapter {\r\n    constructor(api) {\r\n\r\n        if (!api || typeof api !== 'object') {\r\n            throw new TypeError('Adapter requires an api configuration object.');\r\n        }\r\n\r\n        api = assert(api, ['create', 'resolve', 'reject', 'all']);\r\n\r\n        this.create = api.create;\r\n        this.resolve = api.resolve;\r\n        this.reject = api.reject;\r\n        this.all = api.all;\r\n\r\n        if (typeof this.create !== 'function') {\r\n            throw new TypeError('Function \\'create\\' must be specified.');\r\n        }\r\n\r\n        if (typeof this.resolve !== 'function') {\r\n            throw new TypeError('Function \\'resolve\\' must be specified.');\r\n        }\r\n\r\n        if (typeof this.reject !== 'function') {\r\n            throw new TypeError('Function \\'reject\\' must be specified.');\r\n        }\r\n\r\n        if (typeof this.all !== 'function') {\r\n            throw new TypeError('Function \\'all\\' must be specified.');\r\n        }\r\n    }\r\n}\r\n\r\nmodule.exports = {PromiseAdapter};\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAM;EAACA;AAAM,CAAC,GAAGC,OAAO,CAAC,UAAU,CAAC;;AAEpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,cAAc,CAAC;EACjBC,WAAWA,CAACC,GAAG,EAAE;IAEb,IAAI,CAACA,GAAG,IAAI,OAAOA,GAAG,KAAK,QAAQ,EAAE;MACjC,MAAM,IAAIC,SAAS,CAAC,+CAA+C,CAAC;IACxE;IAEAD,GAAG,GAAGJ,MAAM,CAACI,GAAG,EAAE,CAAC,QAAQ,EAAE,SAAS,EAAE,QAAQ,EAAE,KAAK,CAAC,CAAC;IAEzD,IAAI,CAACE,MAAM,GAAGF,GAAG,CAACE,MAAM;IACxB,IAAI,CAACC,OAAO,GAAGH,GAAG,CAACG,OAAO;IAC1B,IAAI,CAACC,MAAM,GAAGJ,GAAG,CAACI,MAAM;IACxB,IAAI,CAACC,GAAG,GAAGL,GAAG,CAACK,GAAG;IAElB,IAAI,OAAO,IAAI,CAACH,MAAM,KAAK,UAAU,EAAE;MACnC,MAAM,IAAID,SAAS,CAAC,wCAAwC,CAAC;IACjE;IAEA,IAAI,OAAO,IAAI,CAACE,OAAO,KAAK,UAAU,EAAE;MACpC,MAAM,IAAIF,SAAS,CAAC,yCAAyC,CAAC;IAClE;IAEA,IAAI,OAAO,IAAI,CAACG,MAAM,KAAK,UAAU,EAAE;MACnC,MAAM,IAAIH,SAAS,CAAC,wCAAwC,CAAC;IACjE;IAEA,IAAI,OAAO,IAAI,CAACI,GAAG,KAAK,UAAU,EAAE;MAChC,MAAM,IAAIJ,SAAS,CAAC,qCAAqC,CAAC;IAC9D;EACJ;AACJ;AAEAK,MAAM,CAACC,OAAO,GAAG;EAACT;AAAc,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}