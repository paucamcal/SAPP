{"ast":null,"code":"import React, { Component } from 'react';\nclass Geolocation extends Component {\n  constructor(...args) {\n    super(...args);\n    this.handleLocationSuccess = position => {\n      // Handle the user's location data here\n      const latitude = position.coords.latitude;\n      const longitude = position.coords.longitude;\n\n      // You can use latitude and longitude to perform actions based on geolocation.\n      console.log(`Latitude: ${latitude}, Longitude: ${longitude}`);\n    };\n    this.handleLocationError = error => {\n      // Handle geolocation error\n      console.error(`Geolocation error: ${error.message}`);\n      // You can provide a user-friendly message or take other actions as needed.\n    };\n  }\n  componentDidMount() {\n    if (\"geolocation\" in navigator) {\n      navigator.geolocation.getCurrentPosition(this.handleLocationSuccess, this.handleLocationError);\n    } else {\n      this.handleLocationError({\n        message: \"Geolocation is not available in this browser\"\n      });\n    }\n  }\n  render() {\n    return null; // You can render some content here if needed.\n  }\n}\n\nexport default Geolocation;","map":{"version":3,"names":["React","Component","Geolocation","constructor","args","handleLocationSuccess","position","latitude","coords","longitude","console","log","handleLocationError","error","message","componentDidMount","navigator","geolocation","getCurrentPosition","render"],"sources":["/Users/luna/Library/Mobile Documents/com~apple~CloudDocs/GitHub/paucamcal.github.io/AESP/src/Geolocation.js"],"sourcesContent":["import React, { Component } from 'react';\n\nclass Geolocation extends Component {\n  componentDidMount() {\n    if (\"geolocation\" in navigator) {\n      navigator.geolocation.getCurrentPosition(this.handleLocationSuccess, this.handleLocationError);\n    } else {\n      this.handleLocationError({ message: \"Geolocation is not available in this browser\" });\n    }\n  }\n\n  handleLocationSuccess = (position) => {\n    // Handle the user's location data here\n    const latitude = position.coords.latitude;\n    const longitude = position.coords.longitude;\n\n    // You can use latitude and longitude to perform actions based on geolocation.\n    console.log(`Latitude: ${latitude}, Longitude: ${longitude}`);\n  };\n\n  handleLocationError = (error) => {\n    // Handle geolocation error\n    console.error(`Geolocation error: ${error.message}`);\n    // You can provide a user-friendly message or take other actions as needed.\n  };\n\n  render() {\n    return null; // You can render some content here if needed.\n  }\n}\n\nexport default Geolocation;\n"],"mappings":"AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AAExC,MAAMC,WAAW,SAASD,SAAS,CAAC;EAAAE,YAAA,GAAAC,IAAA;IAAA,SAAAA,IAAA;IAAA,KASlCC,qBAAqB,GAAIC,QAAQ,IAAK;MACpC;MACA,MAAMC,QAAQ,GAAGD,QAAQ,CAACE,MAAM,CAACD,QAAQ;MACzC,MAAME,SAAS,GAAGH,QAAQ,CAACE,MAAM,CAACC,SAAS;;MAE3C;MACAC,OAAO,CAACC,GAAG,CAAE,aAAYJ,QAAS,gBAAeE,SAAU,EAAC,CAAC;IAC/D,CAAC;IAAA,KAEDG,mBAAmB,GAAIC,KAAK,IAAK;MAC/B;MACAH,OAAO,CAACG,KAAK,CAAE,sBAAqBA,KAAK,CAACC,OAAQ,EAAC,CAAC;MACpD;IACF,CAAC;EAAA;EArBDC,iBAAiBA,CAAA,EAAG;IAClB,IAAI,aAAa,IAAIC,SAAS,EAAE;MAC9BA,SAAS,CAACC,WAAW,CAACC,kBAAkB,CAAC,IAAI,CAACb,qBAAqB,EAAE,IAAI,CAACO,mBAAmB,CAAC;IAChG,CAAC,MAAM;MACL,IAAI,CAACA,mBAAmB,CAAC;QAAEE,OAAO,EAAE;MAA+C,CAAC,CAAC;IACvF;EACF;EAiBAK,MAAMA,CAAA,EAAG;IACP,OAAO,IAAI,CAAC,CAAC;EACf;AACF;;AAEA,eAAejB,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}