{"ast":null,"code":"/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */\n\nconst {\n  ServerFormatting\n} = require('./server-formatting');\nconst {\n  ParameterizedQueryError\n} = require('../errors');\nconst {\n  QueryFile\n} = require('../query-file');\nconst {\n  assert\n} = require('../assert');\nconst npm = {\n  EOL: require('os').EOL,\n  utils: require('../utils')\n};\n\n/**\r\n * @class ParameterizedQuery\r\n * @description\r\n * Constructs a new {@link ParameterizedQuery} object. All properties can also be set after the object's construction.\r\n *\r\n * This type extends the basic `{text, values}` object, i.e. when the basic object is used with a query method,\r\n * a new {@link ParameterizedQuery} object is created in its place.\r\n *\r\n * The type can be used in place of the `query` parameter, with any query method directly.\r\n *\r\n * The type is available from the library's root: `pgp.ParameterizedQuery`.\r\n *\r\n * @param {string|QueryFile|Object} [options]\r\n * Object configuration options / properties.\r\n *\r\n * @param {string|QueryFile} [options.text] - See property {@link ParameterizedQuery#text text}.\r\n * @param {array} [options.values] - See property {@link ParameterizedQuery#values values}.\r\n * @param {boolean} [options.binary] - See property {@link ParameterizedQuery#binary binary}.\r\n * @param {string} [options.rowMode] - See property {@link ParameterizedQuery#rowMode rowMode}.\r\n *\r\n * @returns {ParameterizedQuery}\r\n *\r\n * @see\r\n * {@link errors.ParameterizedQueryError ParameterizedQueryError}\r\n *\r\n * @example\r\n *\r\n * const {ParameterizedQuery: PQ} = require('pg-promise');\r\n *\r\n * // Creating a complete Parameterized Query with parameters:\r\n * const findUser = new PQ({text: 'SELECT * FROM Users WHERE id = $1', values: [123]});\r\n *\r\n * db.one(findUser)\r\n *     .then(user => {\r\n *         // user found;\r\n *     })\r\n *     .catch(error => {\r\n *         // error;\r\n *     });\r\n *\r\n * @example\r\n *\r\n * const {ParameterizedQuery: PQ} = require('pg-promise');\r\n *\r\n * // Creating a reusable Parameterized Query without values:\r\n * const addUser = new PQ('INSERT INTO Users(name, age) VALUES($1, $2)');\r\n *\r\n * // setting values explicitly:\r\n * addUser.values = ['John', 30];\r\n *\r\n * db.none(addUser)\r\n *     .then(() => {\r\n *         // user added;\r\n *     })\r\n *     .catch(error=> {\r\n *         // error;\r\n *     });\r\n *\r\n * // setting values implicitly, by passing them into the query method:\r\n * db.none(addUser, ['Mike', 25])\r\n *     .then(() => {\r\n *         // user added;\r\n *     })\r\n *     .catch(error=> {\r\n *         // error;\r\n *     });\r\n */\nclass ParameterizedQuery extends ServerFormatting {\n  constructor(options) {\n    if (typeof options === 'string' || options instanceof QueryFile) {\n      options = {\n        text: options\n      };\n    } else {\n      options = assert(options, ['text', 'values', 'binary', 'rowMode']);\n    }\n    super(options);\n  }\n}\n\n/**\r\n * @method ParameterizedQuery#parse\r\n * @description\r\n * Parses the current object and returns a simple `{text, values}`, if successful,\r\n * or else it returns a {@link errors.ParameterizedQueryError ParameterizedQueryError} object.\r\n *\r\n * This method is primarily for internal use by the library.\r\n *\r\n * @returns {{text, values}|errors.ParameterizedQueryError}\r\n */\nParameterizedQuery.prototype.parse = function () {\n  const _i = this._inner,\n    options = _i.options;\n  const qf = options.text instanceof QueryFile ? options.text : null;\n  if (!_i.changed && !qf) {\n    return _i.target;\n  }\n  const errors = [],\n    values = _i.target.values;\n  _i.target = {\n    text: options.text\n  };\n  _i.changed = true;\n  _i.currentError = undefined;\n  if (qf) {\n    qf.prepare();\n    if (qf.error) {\n      errors.push(qf.error);\n    } else {\n      _i.target.text = qf[QueryFile.$query];\n    }\n  }\n  if (!npm.utils.isText(_i.target.text)) {\n    errors.push('Property \\'text\\' must be a non-empty text string.');\n  }\n  if (!npm.utils.isNull(values)) {\n    _i.target.values = values;\n  }\n  if (options.binary !== undefined) {\n    _i.target.binary = !!options.binary;\n  }\n  if (options.rowMode !== undefined) {\n    _i.target.rowMode = options.rowMode;\n  }\n  if (errors.length) {\n    return _i.currentError = new ParameterizedQueryError(errors[0], _i.target);\n  }\n  _i.changed = false;\n  return _i.target;\n};\n\n/**\r\n * @method ParameterizedQuery#toString\r\n * @description\r\n * Creates a well-formatted multi-line string that represents the object's current state.\r\n *\r\n * It is called automatically when writing the object into the console.\r\n *\r\n * @param {number} [level=0]\r\n * Nested output level, to provide visual offset.\r\n *\r\n * @returns {string}\r\n */\nParameterizedQuery.prototype.toString = function (level) {\n  level = level > 0 ? parseInt(level) : 0;\n  const gap = npm.utils.messageGap(level + 1);\n  const pq = this.parse();\n  const lines = ['ParameterizedQuery {'];\n  if (npm.utils.isText(pq.text)) {\n    lines.push(gap + 'text: \"' + pq.text + '\"');\n  }\n  if (this.values !== undefined) {\n    lines.push(gap + 'values: ' + npm.utils.toJson(this.values));\n  }\n  if (this.binary !== undefined) {\n    lines.push(gap + 'binary: ' + npm.utils.toJson(this.binary));\n  }\n  if (this.rowMode !== undefined) {\n    lines.push(gap + 'rowMode: ' + npm.utils.toJson(this.rowMode));\n  }\n  if (this.error !== undefined) {\n    lines.push(gap + 'error: ' + this.error.toString(level + 1));\n  }\n  lines.push(npm.utils.messageGap(level) + '}');\n  return lines.join(npm.EOL);\n};\nmodule.exports = {\n  ParameterizedQuery\n};\n\n/**\r\n * @name ParameterizedQuery#text\r\n * @type {string|QueryFile}\r\n * @description\r\n * A non-empty query string or a {@link QueryFile} object.\r\n *\r\n * Only the basic variables (`$1`, `$2`, etc) can be used in the query, because _Parameterized Queries_\r\n * are formatted on the server side.\r\n */\n\n/**\r\n * @name ParameterizedQuery#values\r\n * @type {array}\r\n * @description\r\n * Query formatting parameters, depending on the type:\r\n *\r\n * - `null` / `undefined` means the query has no formatting parameters\r\n * - `Array` - it is an array of formatting parameters\r\n * - None of the above, means it is a single formatting value, which\r\n *   is then automatically wrapped into an array\r\n */\n\n/**\r\n * @name ParameterizedQuery#binary\r\n * @type {boolean}\r\n * @default undefined\r\n * @description\r\n * Activates binary result mode. The default is the text mode.\r\n *\r\n * @see {@link http://www.postgresql.org/docs/devel/static/protocol-flow.html#PROTOCOL-FLOW-EXT-QUERY Extended Query}\r\n */\n\n/**\r\n * @name ParameterizedQuery#rowMode\r\n * @type {string}\r\n * @default undefined\r\n * @description\r\n * Changes the way data arrives to the client, with only one value supported by $[pg]:\r\n *  - `array` will make all data rows arrive as arrays of values. By default, rows arrive as objects.\r\n */\n\n/**\r\n * @name ParameterizedQuery#error\r\n * @type {errors.ParameterizedQueryError}\r\n * @default undefined\r\n * @readonly\r\n * @description\r\n * When in an error state, it is set to a {@link errors.ParameterizedQueryError ParameterizedQueryError} object. Otherwise, it is `undefined`.\r\n *\r\n * This property is primarily for internal use by the library.\r\n */","map":{"version":3,"names":["ServerFormatting","require","ParameterizedQueryError","QueryFile","assert","npm","EOL","utils","ParameterizedQuery","constructor","options","text","prototype","parse","_i","_inner","qf","changed","target","errors","values","currentError","undefined","prepare","error","push","$query","isText","isNull","binary","rowMode","length","toString","level","parseInt","gap","messageGap","pq","lines","toJson","join","module","exports"],"sources":["/Users/luna/Library/Mobile Documents/com~apple~CloudDocs/GitHub/paucamcal.github.io/AESP/node_modules/pg-promise/lib/types/parameterized-query.js"],"sourcesContent":["/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */\r\n\r\nconst {ServerFormatting} = require('./server-formatting');\r\nconst {ParameterizedQueryError} = require('../errors');\r\nconst {QueryFile} = require('../query-file');\r\nconst {assert} = require('../assert');\r\n\r\nconst npm = {\r\n    EOL: require('os').EOL,\r\n    utils: require('../utils')\r\n};\r\n\r\n/**\r\n * @class ParameterizedQuery\r\n * @description\r\n * Constructs a new {@link ParameterizedQuery} object. All properties can also be set after the object's construction.\r\n *\r\n * This type extends the basic `{text, values}` object, i.e. when the basic object is used with a query method,\r\n * a new {@link ParameterizedQuery} object is created in its place.\r\n *\r\n * The type can be used in place of the `query` parameter, with any query method directly.\r\n *\r\n * The type is available from the library's root: `pgp.ParameterizedQuery`.\r\n *\r\n * @param {string|QueryFile|Object} [options]\r\n * Object configuration options / properties.\r\n *\r\n * @param {string|QueryFile} [options.text] - See property {@link ParameterizedQuery#text text}.\r\n * @param {array} [options.values] - See property {@link ParameterizedQuery#values values}.\r\n * @param {boolean} [options.binary] - See property {@link ParameterizedQuery#binary binary}.\r\n * @param {string} [options.rowMode] - See property {@link ParameterizedQuery#rowMode rowMode}.\r\n *\r\n * @returns {ParameterizedQuery}\r\n *\r\n * @see\r\n * {@link errors.ParameterizedQueryError ParameterizedQueryError}\r\n *\r\n * @example\r\n *\r\n * const {ParameterizedQuery: PQ} = require('pg-promise');\r\n *\r\n * // Creating a complete Parameterized Query with parameters:\r\n * const findUser = new PQ({text: 'SELECT * FROM Users WHERE id = $1', values: [123]});\r\n *\r\n * db.one(findUser)\r\n *     .then(user => {\r\n *         // user found;\r\n *     })\r\n *     .catch(error => {\r\n *         // error;\r\n *     });\r\n *\r\n * @example\r\n *\r\n * const {ParameterizedQuery: PQ} = require('pg-promise');\r\n *\r\n * // Creating a reusable Parameterized Query without values:\r\n * const addUser = new PQ('INSERT INTO Users(name, age) VALUES($1, $2)');\r\n *\r\n * // setting values explicitly:\r\n * addUser.values = ['John', 30];\r\n *\r\n * db.none(addUser)\r\n *     .then(() => {\r\n *         // user added;\r\n *     })\r\n *     .catch(error=> {\r\n *         // error;\r\n *     });\r\n *\r\n * // setting values implicitly, by passing them into the query method:\r\n * db.none(addUser, ['Mike', 25])\r\n *     .then(() => {\r\n *         // user added;\r\n *     })\r\n *     .catch(error=> {\r\n *         // error;\r\n *     });\r\n */\r\nclass ParameterizedQuery extends ServerFormatting {\r\n    constructor(options) {\r\n        if (typeof options === 'string' || options instanceof QueryFile) {\r\n            options = {\r\n                text: options\r\n            };\r\n        } else {\r\n            options = assert(options, ['text', 'values', 'binary', 'rowMode']);\r\n        }\r\n        super(options);\r\n    }\r\n}\r\n\r\n/**\r\n * @method ParameterizedQuery#parse\r\n * @description\r\n * Parses the current object and returns a simple `{text, values}`, if successful,\r\n * or else it returns a {@link errors.ParameterizedQueryError ParameterizedQueryError} object.\r\n *\r\n * This method is primarily for internal use by the library.\r\n *\r\n * @returns {{text, values}|errors.ParameterizedQueryError}\r\n */\r\nParameterizedQuery.prototype.parse = function () {\r\n\r\n    const _i = this._inner, options = _i.options;\r\n    const qf = options.text instanceof QueryFile ? options.text : null;\r\n\r\n    if (!_i.changed && !qf) {\r\n        return _i.target;\r\n    }\r\n\r\n    const errors = [], values = _i.target.values;\r\n    _i.target = {\r\n        text: options.text\r\n    };\r\n    _i.changed = true;\r\n    _i.currentError = undefined;\r\n\r\n    if (qf) {\r\n        qf.prepare();\r\n        if (qf.error) {\r\n            errors.push(qf.error);\r\n        } else {\r\n            _i.target.text = qf[QueryFile.$query];\r\n        }\r\n    }\r\n\r\n    if (!npm.utils.isText(_i.target.text)) {\r\n        errors.push('Property \\'text\\' must be a non-empty text string.');\r\n    }\r\n\r\n    if (!npm.utils.isNull(values)) {\r\n        _i.target.values = values;\r\n    }\r\n\r\n    if (options.binary !== undefined) {\r\n        _i.target.binary = !!options.binary;\r\n    }\r\n\r\n    if (options.rowMode !== undefined) {\r\n        _i.target.rowMode = options.rowMode;\r\n    }\r\n\r\n    if (errors.length) {\r\n        return _i.currentError = new ParameterizedQueryError(errors[0], _i.target);\r\n    }\r\n\r\n    _i.changed = false;\r\n\r\n    return _i.target;\r\n};\r\n\r\n/**\r\n * @method ParameterizedQuery#toString\r\n * @description\r\n * Creates a well-formatted multi-line string that represents the object's current state.\r\n *\r\n * It is called automatically when writing the object into the console.\r\n *\r\n * @param {number} [level=0]\r\n * Nested output level, to provide visual offset.\r\n *\r\n * @returns {string}\r\n */\r\nParameterizedQuery.prototype.toString = function (level) {\r\n    level = level > 0 ? parseInt(level) : 0;\r\n    const gap = npm.utils.messageGap(level + 1);\r\n    const pq = this.parse();\r\n    const lines = [\r\n        'ParameterizedQuery {'\r\n    ];\r\n    if (npm.utils.isText(pq.text)) {\r\n        lines.push(gap + 'text: \"' + pq.text + '\"');\r\n    }\r\n    if (this.values !== undefined) {\r\n        lines.push(gap + 'values: ' + npm.utils.toJson(this.values));\r\n    }\r\n    if (this.binary !== undefined) {\r\n        lines.push(gap + 'binary: ' + npm.utils.toJson(this.binary));\r\n    }\r\n    if (this.rowMode !== undefined) {\r\n        lines.push(gap + 'rowMode: ' + npm.utils.toJson(this.rowMode));\r\n    }\r\n    if (this.error !== undefined) {\r\n        lines.push(gap + 'error: ' + this.error.toString(level + 1));\r\n    }\r\n    lines.push(npm.utils.messageGap(level) + '}');\r\n    return lines.join(npm.EOL);\r\n};\r\n\r\nmodule.exports = {ParameterizedQuery};\r\n\r\n/**\r\n * @name ParameterizedQuery#text\r\n * @type {string|QueryFile}\r\n * @description\r\n * A non-empty query string or a {@link QueryFile} object.\r\n *\r\n * Only the basic variables (`$1`, `$2`, etc) can be used in the query, because _Parameterized Queries_\r\n * are formatted on the server side.\r\n */\r\n\r\n/**\r\n * @name ParameterizedQuery#values\r\n * @type {array}\r\n * @description\r\n * Query formatting parameters, depending on the type:\r\n *\r\n * - `null` / `undefined` means the query has no formatting parameters\r\n * - `Array` - it is an array of formatting parameters\r\n * - None of the above, means it is a single formatting value, which\r\n *   is then automatically wrapped into an array\r\n */\r\n\r\n/**\r\n * @name ParameterizedQuery#binary\r\n * @type {boolean}\r\n * @default undefined\r\n * @description\r\n * Activates binary result mode. The default is the text mode.\r\n *\r\n * @see {@link http://www.postgresql.org/docs/devel/static/protocol-flow.html#PROTOCOL-FLOW-EXT-QUERY Extended Query}\r\n */\r\n\r\n/**\r\n * @name ParameterizedQuery#rowMode\r\n * @type {string}\r\n * @default undefined\r\n * @description\r\n * Changes the way data arrives to the client, with only one value supported by $[pg]:\r\n *  - `array` will make all data rows arrive as arrays of values. By default, rows arrive as objects.\r\n */\r\n\r\n/**\r\n * @name ParameterizedQuery#error\r\n * @type {errors.ParameterizedQueryError}\r\n * @default undefined\r\n * @readonly\r\n * @description\r\n * When in an error state, it is set to a {@link errors.ParameterizedQueryError ParameterizedQueryError} object. Otherwise, it is `undefined`.\r\n *\r\n * This property is primarily for internal use by the library.\r\n */\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}