{"ast":null,"code":"const npm = {\n  u: require('util'),\n  os: require('os'),\n  utils: require('../utils/static')\n};\n\n/**\r\n * @class errors.BatchError\r\n * @augments external:Error\r\n * @description\r\n * This type represents all errors rejected by method {@link batch}, except for {@link external:TypeError TypeError}\r\n * when the method receives invalid input parameters.\r\n *\r\n * @property {string} name\r\n * Standard {@link external:Error Error} property - error type name = `BatchError`.\r\n *\r\n * @property {string} message\r\n * Standard {@link external:Error Error} property - the error message.\r\n *\r\n * It represents the message of the first error encountered in the batch, and is a safe\r\n * version of using `first.message`.\r\n *\r\n * @property {string} stack\r\n * Standard {@link external:Error Error} property - the stack trace.\r\n *\r\n * @property {array} data\r\n * Array of objects `{success, result, [origin]}`:\r\n * - `success` = true/false, indicates whether the corresponding value in the input array was resolved.\r\n * - `result` = resolved data, if `success`=`true`, or else the rejection reason.\r\n * - `origin` - set only when failed as a result of an unsuccessful call into the notification callback\r\n *    (parameter `cb` of method {@link batch})\r\n *\r\n * The array has the same size as the input one that was passed into method {@link batch}, providing direct mapping.\r\n *\r\n * @property {} stat\r\n * Resolution Statistics.\r\n *\r\n * @property {number} stat.total\r\n * Total number of elements in the batch.\r\n *\r\n * @property {number} stat.succeeded\r\n * Number of resolved values in the batch.\r\n *\r\n * @property {number} stat.failed\r\n * Number of rejected values in the batch.\r\n *\r\n * @property {number} stat.duration\r\n * Time in milliseconds it took to settle all values.\r\n *\r\n * @property {} first\r\n * The very first error within the batch, with support for nested batch results, it is also the same error\r\n * as $[promise.all] would provide.\r\n *\r\n * @see {@link batch}\r\n *\r\n */\nclass BatchError extends Error {\n  constructor(result, errors, duration) {\n    function getErrors() {\n      const err = new Array(errors.length);\n      for (let i = 0; i < errors.length; i++) {\n        err[i] = result[errors[i]].result;\n        if (err[i] instanceof BatchError) {\n          err[i] = err[i].getErrors();\n        }\n      }\n      npm.utils.extend(err, '$isErrorList', true);\n      return err;\n    }\n    const e = getErrors();\n    let first = e[0];\n    while (first && first.$isErrorList) {\n      first = first[0];\n    }\n    let message;\n    if (first instanceof Error) {\n      message = first.message;\n    } else {\n      if (typeof first !== 'string') {\n        first = npm.u.inspect(first);\n      }\n      message = first;\n    }\n    super(message);\n    this.name = this.constructor.name;\n    this.data = result;\n\n    // we do not show it within the inspect, because when the error\n    // happens for a nested result, the output becomes a mess.\n    this.first = first;\n    this.stat = {\n      total: result.length,\n      succeeded: result.length - e.length,\n      failed: e.length,\n      duration: duration\n    };\n    this.getErrors = getErrors;\n    Error.captureStackTrace(this, this.constructor);\n  }\n\n  /**\r\n   * @method errors.BatchError.getErrors\r\n   * @description\r\n   * Returns the complete list of errors only.\r\n   *\r\n   * It supports nested batch results, presented as a sub-array.\r\n   *\r\n   * @returns {array}\r\n   */\n}\n\n/**\r\n * @method errors.BatchError.toString\r\n * @description\r\n * Creates a well-formatted multi-line string that represents the error.\r\n *\r\n * It is called automatically when writing the object into the console.\r\n *\r\n * The output is an abbreviated version of the error, because the complete error\r\n * is often too much for displaying or even logging, as a batch can be of any size.\r\n * Therefore, only errors are rendered from the `data` property, alongside their indexes,\r\n * and only up to the first 5, to avoid polluting the screen or the log file.\r\n *\r\n * @param {number} [level=0]\r\n * Nested output level, to provide visual offset.\r\n *\r\n * @returns {string}\r\n */\nBatchError.prototype.toString = function (level) {\n  level = level > 0 ? parseInt(level) : 0;\n  const gap0 = npm.utils.messageGap(level),\n    gap1 = npm.utils.messageGap(level + 1),\n    gap2 = npm.utils.messageGap(level + 2),\n    lines = ['BatchError {', gap1 + 'stat: { total: ' + this.stat.total + ', succeeded: ' + this.stat.succeeded + ', failed: ' + this.stat.failed + ', duration: ' + this.stat.duration + ' }', gap1 + 'errors: ['];\n\n  // In order to avoid polluting the error log or the console, \n  // we limit the log output to the top 5 errors:\n  const maxErrors = 5;\n  let counter = 0;\n  this.data.forEach((d, index) => {\n    if (!d.success && counter < maxErrors) {\n      lines.push(gap2 + index + ': ' + npm.utils.formatError(d.result, level + 2));\n      counter++;\n    }\n  });\n  lines.push(gap1 + ']');\n  lines.push(gap0 + '}');\n  return lines.join(npm.os.EOL);\n};\nnpm.utils.addInspection(BatchError, function () {\n  return this.toString();\n});\nmodule.exports = {\n  BatchError\n};","map":{"version":3,"names":["npm","u","require","os","utils","BatchError","Error","constructor","result","errors","duration","getErrors","err","Array","length","i","extend","e","first","$isErrorList","message","inspect","name","data","stat","total","succeeded","failed","captureStackTrace","prototype","toString","level","parseInt","gap0","messageGap","gap1","gap2","lines","maxErrors","counter","forEach","d","index","success","push","formatError","join","EOL","addInspection","module","exports"],"sources":["/Users/luna/Library/Mobile Documents/com~apple~CloudDocs/GitHub/paucamcal.github.io/AESP/node_modules/spex/lib/errors/batch.js"],"sourcesContent":["const npm = {\r\n    u: require('util'),\r\n    os: require('os'),\r\n    utils: require('../utils/static')\r\n};\r\n\r\n/**\r\n * @class errors.BatchError\r\n * @augments external:Error\r\n * @description\r\n * This type represents all errors rejected by method {@link batch}, except for {@link external:TypeError TypeError}\r\n * when the method receives invalid input parameters.\r\n *\r\n * @property {string} name\r\n * Standard {@link external:Error Error} property - error type name = `BatchError`.\r\n *\r\n * @property {string} message\r\n * Standard {@link external:Error Error} property - the error message.\r\n *\r\n * It represents the message of the first error encountered in the batch, and is a safe\r\n * version of using `first.message`.\r\n *\r\n * @property {string} stack\r\n * Standard {@link external:Error Error} property - the stack trace.\r\n *\r\n * @property {array} data\r\n * Array of objects `{success, result, [origin]}`:\r\n * - `success` = true/false, indicates whether the corresponding value in the input array was resolved.\r\n * - `result` = resolved data, if `success`=`true`, or else the rejection reason.\r\n * - `origin` - set only when failed as a result of an unsuccessful call into the notification callback\r\n *    (parameter `cb` of method {@link batch})\r\n *\r\n * The array has the same size as the input one that was passed into method {@link batch}, providing direct mapping.\r\n *\r\n * @property {} stat\r\n * Resolution Statistics.\r\n *\r\n * @property {number} stat.total\r\n * Total number of elements in the batch.\r\n *\r\n * @property {number} stat.succeeded\r\n * Number of resolved values in the batch.\r\n *\r\n * @property {number} stat.failed\r\n * Number of rejected values in the batch.\r\n *\r\n * @property {number} stat.duration\r\n * Time in milliseconds it took to settle all values.\r\n *\r\n * @property {} first\r\n * The very first error within the batch, with support for nested batch results, it is also the same error\r\n * as $[promise.all] would provide.\r\n *\r\n * @see {@link batch}\r\n *\r\n */\r\nclass BatchError extends Error {\r\n\r\n    constructor(result, errors, duration) {\r\n\r\n        function getErrors() {\r\n            const err = new Array(errors.length);\r\n            for (let i = 0; i < errors.length; i++) {\r\n                err[i] = result[errors[i]].result;\r\n                if (err[i] instanceof BatchError) {\r\n                    err[i] = err[i].getErrors();\r\n                }\r\n            }\r\n            npm.utils.extend(err, '$isErrorList', true);\r\n            return err;\r\n        }\r\n\r\n        const e = getErrors();\r\n\r\n        let first = e[0];\r\n\r\n        while (first && first.$isErrorList) {\r\n            first = first[0];\r\n        }\r\n\r\n        let message;\r\n\r\n        if (first instanceof Error) {\r\n            message = first.message;\r\n        } else {\r\n            if (typeof first !== 'string') {\r\n                first = npm.u.inspect(first);\r\n            }\r\n            message = first;\r\n        }\r\n\r\n        super(message);\r\n        this.name = this.constructor.name;\r\n\r\n        this.data = result;\r\n\r\n        // we do not show it within the inspect, because when the error\r\n        // happens for a nested result, the output becomes a mess.\r\n        this.first = first;\r\n\r\n        this.stat = {\r\n            total: result.length,\r\n            succeeded: result.length - e.length,\r\n            failed: e.length,\r\n            duration: duration\r\n        };\r\n\r\n        this.getErrors = getErrors;\r\n\r\n        Error.captureStackTrace(this, this.constructor);\r\n    }\r\n\r\n    /**\r\n     * @method errors.BatchError.getErrors\r\n     * @description\r\n     * Returns the complete list of errors only.\r\n     *\r\n     * It supports nested batch results, presented as a sub-array.\r\n     *\r\n     * @returns {array}\r\n     */\r\n}\r\n\r\n/**\r\n * @method errors.BatchError.toString\r\n * @description\r\n * Creates a well-formatted multi-line string that represents the error.\r\n *\r\n * It is called automatically when writing the object into the console.\r\n *\r\n * The output is an abbreviated version of the error, because the complete error\r\n * is often too much for displaying or even logging, as a batch can be of any size.\r\n * Therefore, only errors are rendered from the `data` property, alongside their indexes,\r\n * and only up to the first 5, to avoid polluting the screen or the log file.\r\n *\r\n * @param {number} [level=0]\r\n * Nested output level, to provide visual offset.\r\n *\r\n * @returns {string}\r\n */\r\nBatchError.prototype.toString = function (level) {\r\n    level = level > 0 ? parseInt(level) : 0;\r\n    const gap0 = npm.utils.messageGap(level),\r\n        gap1 = npm.utils.messageGap(level + 1),\r\n        gap2 = npm.utils.messageGap(level + 2),\r\n        lines = [\r\n            'BatchError {',\r\n            gap1 + 'stat: { total: ' + this.stat.total + ', succeeded: ' + this.stat.succeeded +\r\n            ', failed: ' + this.stat.failed + ', duration: ' + this.stat.duration + ' }',\r\n            gap1 + 'errors: ['\r\n        ];\r\n\r\n    // In order to avoid polluting the error log or the console, \r\n    // we limit the log output to the top 5 errors:\r\n    const maxErrors = 5;\r\n    let counter = 0;\r\n    this.data.forEach((d, index) => {\r\n        if (!d.success && counter < maxErrors) {\r\n            lines.push(gap2 + index + ': ' + npm.utils.formatError(d.result, level + 2));\r\n            counter++;\r\n        }\r\n    });\r\n    lines.push(gap1 + ']');\r\n    lines.push(gap0 + '}');\r\n    return lines.join(npm.os.EOL);\r\n};\r\n\r\nnpm.utils.addInspection(BatchError, function () {\r\n    return this.toString();\r\n});\r\n\r\nmodule.exports = {BatchError};\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}