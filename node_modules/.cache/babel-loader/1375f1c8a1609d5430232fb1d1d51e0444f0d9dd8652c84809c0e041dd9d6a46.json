{"ast":null,"code":"/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */\n\nconst npm = {\n  os: require('os'),\n  utils: require('../utils'),\n  text: require('../text')\n};\n\n/**\r\n * @enum {number}\r\n * @alias errors.queryResultErrorCode\r\n * @readonly\r\n * @description\r\n * `queryResultErrorCode` enumerator, available from the {@link errors} namespace.\r\n *\r\n * Represents an integer code for each type of error supported by type {@link errors.QueryResultError}.\r\n *\r\n * @see {@link errors.QueryResultError}\r\n */\nconst queryResultErrorCode = {\n  /** No data returned from the query. */\n  noData: 0,\n  /** No return data was expected. */\n  notEmpty: 1,\n  /** Multiple rows were not expected. */\n  multiple: 2\n};\nconst errorMessages = [{\n  name: 'noData',\n  message: npm.text.noData\n}, {\n  name: 'notEmpty',\n  message: npm.text.notEmpty\n}, {\n  name: 'multiple',\n  message: npm.text.multiple\n}];\n\n/**\r\n * @class errors.QueryResultError\r\n * @augments external:Error\r\n * @description\r\n *\r\n * This error is specified as the rejection reason for all result-specific methods when the result doesn't match\r\n * the expectation, i.e. when a query result doesn't match its Query Result Mask - the value of {@link queryResult}.\r\n *\r\n * The error applies to the result from the following methods: {@link Database#none none},\r\n * {@link Database#one one}, {@link Database#oneOrNone oneOrNone} and {@link Database#many many}.\r\n *\r\n * Supported errors:\r\n *\r\n * - `No return data was expected.`, method {@link Database#none none}\r\n * - `No data returned from the query.`, methods {@link Database#one one} and {@link Database#many many}\r\n * - `Multiple rows were not expected.`, methods {@link Database#one one} and {@link Database#oneOrNone oneOrNone}\r\n *\r\n * Like any other error, this one is notified with through the global event {@link event:error error}.\r\n *\r\n * The type is available from the {@link errors} namespace.\r\n *\r\n * @property {string} name\r\n * Standard {@link external:Error Error} property - error type name = `QueryResultError`.\r\n *\r\n * @property {string} message\r\n * Standard {@link external:Error Error} property - the error message.\r\n *\r\n * @property {string} stack\r\n * Standard {@link external:Error Error} property - the stack trace.\r\n *\r\n * @property {object} result\r\n * The original $[Result] object that was received.\r\n *\r\n * @property {number} received\r\n * Total number of rows received. It is simply the value of `result.rows.length`.\r\n *\r\n * @property {number} code\r\n * Error code - {@link errors.queryResultErrorCode queryResultErrorCode} value.\r\n *\r\n * @property {string} query\r\n * Query that was executed.\r\n *\r\n * Normally, it is the query already formatted with values, if there were any.\r\n * But if you are using initialization option `pgFormatting`, then the query string is before formatting.\r\n *\r\n * @property {*} values\r\n * Values passed in as query parameters. Available only when initialization option `pgFormatting` is used.\r\n * Otherwise, the values are within the pre-formatted `query` string.\r\n *\r\n * @example\r\n *\r\n * const QueryResultError = pgp.errors.QueryResultError;\r\n * const qrec = pgp.errors.queryResultErrorCode;\r\n *\r\n * const initOptions = {\r\n *\r\n *   // pg-promise initialization options...\r\n *\r\n *   error(err, e) {\r\n *       if (err instanceof QueryResultError) {\r\n *           // A query returned unexpected number of records, and thus rejected;\r\n *           \r\n *           // we can check the error code, if we want specifics:\r\n *           if(err.code === qrec.noData) {\r\n *               // expected some data, but received none;\r\n *           }\r\n *\r\n *           // If you write QueryResultError into the console,\r\n *           // you will get a nicely formatted output.\r\n *\r\n *           console.log(err);\r\n *           \r\n *           // See also: err, e.query, e.params, etc.\r\n *       }\r\n *   }\r\n * };\r\n *\r\n * @see\r\n * {@link queryResult}, {@link Database#none none}, {@link Database#one one},\r\n * {@link Database#oneOrNone oneOrNone}, {@link Database#many many}\r\n *\r\n */\nclass QueryResultError extends Error {\n  constructor(code, result, query, values) {\n    const message = errorMessages[code].message;\n    super(message);\n    this.name = this.constructor.name;\n    this.code = code;\n    this.result = result;\n    this.query = query;\n    this.values = values;\n    this.received = result.rows.length;\n    Error.captureStackTrace(this, this.constructor);\n  }\n}\n\n/**\r\n * @method errors.QueryResultError#toString\r\n * @description\r\n * Creates a well-formatted multi-line string that represents the error.\r\n *\r\n * It is called automatically when writing the object into the console.\r\n *\r\n * @param {number} [level=0]\r\n * Nested output level, to provide visual offset.\r\n *\r\n * @returns {string}\r\n */\nQueryResultError.prototype.toString = function (level) {\n  level = level > 0 ? parseInt(level) : 0;\n  const gap0 = npm.utils.messageGap(level),\n    gap1 = npm.utils.messageGap(level + 1),\n    lines = ['QueryResultError {', gap1 + 'code: queryResultErrorCode.' + errorMessages[this.code].name, gap1 + 'message: \"' + this.message + '\"', gap1 + 'received: ' + this.received, gap1 + 'query: ' + (typeof this.query === 'string' ? '\"' + this.query + '\"' : npm.utils.toJson(this.query))];\n  if (this.values !== undefined) {\n    lines.push(gap1 + 'values: ' + npm.utils.toJson(this.values));\n  }\n  lines.push(gap0 + '}');\n  return lines.join(npm.os.EOL);\n};\nnpm.utils.addInspection(QueryResultError, function () {\n  return this.toString();\n});\nmodule.exports = {\n  QueryResultError,\n  queryResultErrorCode\n};","map":{"version":3,"names":["npm","os","require","utils","text","queryResultErrorCode","noData","notEmpty","multiple","errorMessages","name","message","QueryResultError","Error","constructor","code","result","query","values","received","rows","length","captureStackTrace","prototype","toString","level","parseInt","gap0","messageGap","gap1","lines","toJson","undefined","push","join","EOL","addInspection","module","exports"],"sources":["/Users/luna/Library/Mobile Documents/com~apple~CloudDocs/GitHub/paucamcal.github.io/AESP/node_modules/pg-promise/lib/errors/query-result-error.js"],"sourcesContent":["/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */\r\n\r\nconst npm = {\r\n    os: require('os'),\r\n    utils: require('../utils'),\r\n    text: require('../text')\r\n};\r\n\r\n/**\r\n * @enum {number}\r\n * @alias errors.queryResultErrorCode\r\n * @readonly\r\n * @description\r\n * `queryResultErrorCode` enumerator, available from the {@link errors} namespace.\r\n *\r\n * Represents an integer code for each type of error supported by type {@link errors.QueryResultError}.\r\n *\r\n * @see {@link errors.QueryResultError}\r\n */\r\nconst queryResultErrorCode = {\r\n    /** No data returned from the query. */\r\n    noData: 0,\r\n\r\n    /** No return data was expected. */\r\n    notEmpty: 1,\r\n\r\n    /** Multiple rows were not expected. */\r\n    multiple: 2\r\n};\r\n\r\nconst errorMessages = [\r\n    {name: 'noData', message: npm.text.noData},\r\n    {name: 'notEmpty', message: npm.text.notEmpty},\r\n    {name: 'multiple', message: npm.text.multiple}\r\n];\r\n\r\n/**\r\n * @class errors.QueryResultError\r\n * @augments external:Error\r\n * @description\r\n *\r\n * This error is specified as the rejection reason for all result-specific methods when the result doesn't match\r\n * the expectation, i.e. when a query result doesn't match its Query Result Mask - the value of {@link queryResult}.\r\n *\r\n * The error applies to the result from the following methods: {@link Database#none none},\r\n * {@link Database#one one}, {@link Database#oneOrNone oneOrNone} and {@link Database#many many}.\r\n *\r\n * Supported errors:\r\n *\r\n * - `No return data was expected.`, method {@link Database#none none}\r\n * - `No data returned from the query.`, methods {@link Database#one one} and {@link Database#many many}\r\n * - `Multiple rows were not expected.`, methods {@link Database#one one} and {@link Database#oneOrNone oneOrNone}\r\n *\r\n * Like any other error, this one is notified with through the global event {@link event:error error}.\r\n *\r\n * The type is available from the {@link errors} namespace.\r\n *\r\n * @property {string} name\r\n * Standard {@link external:Error Error} property - error type name = `QueryResultError`.\r\n *\r\n * @property {string} message\r\n * Standard {@link external:Error Error} property - the error message.\r\n *\r\n * @property {string} stack\r\n * Standard {@link external:Error Error} property - the stack trace.\r\n *\r\n * @property {object} result\r\n * The original $[Result] object that was received.\r\n *\r\n * @property {number} received\r\n * Total number of rows received. It is simply the value of `result.rows.length`.\r\n *\r\n * @property {number} code\r\n * Error code - {@link errors.queryResultErrorCode queryResultErrorCode} value.\r\n *\r\n * @property {string} query\r\n * Query that was executed.\r\n *\r\n * Normally, it is the query already formatted with values, if there were any.\r\n * But if you are using initialization option `pgFormatting`, then the query string is before formatting.\r\n *\r\n * @property {*} values\r\n * Values passed in as query parameters. Available only when initialization option `pgFormatting` is used.\r\n * Otherwise, the values are within the pre-formatted `query` string.\r\n *\r\n * @example\r\n *\r\n * const QueryResultError = pgp.errors.QueryResultError;\r\n * const qrec = pgp.errors.queryResultErrorCode;\r\n *\r\n * const initOptions = {\r\n *\r\n *   // pg-promise initialization options...\r\n *\r\n *   error(err, e) {\r\n *       if (err instanceof QueryResultError) {\r\n *           // A query returned unexpected number of records, and thus rejected;\r\n *           \r\n *           // we can check the error code, if we want specifics:\r\n *           if(err.code === qrec.noData) {\r\n *               // expected some data, but received none;\r\n *           }\r\n *\r\n *           // If you write QueryResultError into the console,\r\n *           // you will get a nicely formatted output.\r\n *\r\n *           console.log(err);\r\n *           \r\n *           // See also: err, e.query, e.params, etc.\r\n *       }\r\n *   }\r\n * };\r\n *\r\n * @see\r\n * {@link queryResult}, {@link Database#none none}, {@link Database#one one},\r\n * {@link Database#oneOrNone oneOrNone}, {@link Database#many many}\r\n *\r\n */\r\nclass QueryResultError extends Error {\r\n    constructor(code, result, query, values) {\r\n        const message = errorMessages[code].message;\r\n        super(message);\r\n        this.name = this.constructor.name;\r\n        this.code = code;\r\n        this.result = result;\r\n        this.query = query;\r\n        this.values = values;\r\n        this.received = result.rows.length;\r\n        Error.captureStackTrace(this, this.constructor);\r\n    }\r\n}\r\n\r\n/**\r\n * @method errors.QueryResultError#toString\r\n * @description\r\n * Creates a well-formatted multi-line string that represents the error.\r\n *\r\n * It is called automatically when writing the object into the console.\r\n *\r\n * @param {number} [level=0]\r\n * Nested output level, to provide visual offset.\r\n *\r\n * @returns {string}\r\n */\r\nQueryResultError.prototype.toString = function (level) {\r\n    level = level > 0 ? parseInt(level) : 0;\r\n    const gap0 = npm.utils.messageGap(level),\r\n        gap1 = npm.utils.messageGap(level + 1),\r\n        lines = [\r\n            'QueryResultError {',\r\n            gap1 + 'code: queryResultErrorCode.' + errorMessages[this.code].name,\r\n            gap1 + 'message: \"' + this.message + '\"',\r\n            gap1 + 'received: ' + this.received,\r\n            gap1 + 'query: ' + (typeof this.query === 'string' ? '\"' + this.query + '\"' : npm.utils.toJson(this.query))\r\n        ];\r\n    if (this.values !== undefined) {\r\n        lines.push(gap1 + 'values: ' + npm.utils.toJson(this.values));\r\n    }\r\n    lines.push(gap0 + '}');\r\n    return lines.join(npm.os.EOL);\r\n};\r\n\r\nnpm.utils.addInspection(QueryResultError, function () {\r\n    return this.toString();\r\n});\r\n\r\nmodule.exports = {\r\n    QueryResultError,\r\n    queryResultErrorCode\r\n};\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMA,GAAG,GAAG;EACRC,EAAE,EAAEC,OAAO,CAAC,IAAI,CAAC;EACjBC,KAAK,EAAED,OAAO,CAAC,UAAU,CAAC;EAC1BE,IAAI,EAAEF,OAAO,CAAC,SAAS;AAC3B,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMG,oBAAoB,GAAG;EACzB;EACAC,MAAM,EAAE,CAAC;EAET;EACAC,QAAQ,EAAE,CAAC;EAEX;EACAC,QAAQ,EAAE;AACd,CAAC;AAED,MAAMC,aAAa,GAAG,CAClB;EAACC,IAAI,EAAE,QAAQ;EAAEC,OAAO,EAAEX,GAAG,CAACI,IAAI,CAACE;AAAM,CAAC,EAC1C;EAACI,IAAI,EAAE,UAAU;EAAEC,OAAO,EAAEX,GAAG,CAACI,IAAI,CAACG;AAAQ,CAAC,EAC9C;EAACG,IAAI,EAAE,UAAU;EAAEC,OAAO,EAAEX,GAAG,CAACI,IAAI,CAACI;AAAQ,CAAC,CACjD;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMI,gBAAgB,SAASC,KAAK,CAAC;EACjCC,WAAWA,CAACC,IAAI,EAAEC,MAAM,EAAEC,KAAK,EAAEC,MAAM,EAAE;IACrC,MAAMP,OAAO,GAAGF,aAAa,CAACM,IAAI,CAAC,CAACJ,OAAO;IAC3C,KAAK,CAACA,OAAO,CAAC;IACd,IAAI,CAACD,IAAI,GAAG,IAAI,CAACI,WAAW,CAACJ,IAAI;IACjC,IAAI,CAACK,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACC,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACC,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACC,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACC,QAAQ,GAAGH,MAAM,CAACI,IAAI,CAACC,MAAM;IAClCR,KAAK,CAACS,iBAAiB,CAAC,IAAI,EAAE,IAAI,CAACR,WAAW,CAAC;EACnD;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAF,gBAAgB,CAACW,SAAS,CAACC,QAAQ,GAAG,UAAUC,KAAK,EAAE;EACnDA,KAAK,GAAGA,KAAK,GAAG,CAAC,GAAGC,QAAQ,CAACD,KAAK,CAAC,GAAG,CAAC;EACvC,MAAME,IAAI,GAAG3B,GAAG,CAACG,KAAK,CAACyB,UAAU,CAACH,KAAK,CAAC;IACpCI,IAAI,GAAG7B,GAAG,CAACG,KAAK,CAACyB,UAAU,CAACH,KAAK,GAAG,CAAC,CAAC;IACtCK,KAAK,GAAG,CACJ,oBAAoB,EACpBD,IAAI,GAAG,6BAA6B,GAAGpB,aAAa,CAAC,IAAI,CAACM,IAAI,CAAC,CAACL,IAAI,EACpEmB,IAAI,GAAG,YAAY,GAAG,IAAI,CAAClB,OAAO,GAAG,GAAG,EACxCkB,IAAI,GAAG,YAAY,GAAG,IAAI,CAACV,QAAQ,EACnCU,IAAI,GAAG,SAAS,IAAI,OAAO,IAAI,CAACZ,KAAK,KAAK,QAAQ,GAAG,GAAG,GAAG,IAAI,CAACA,KAAK,GAAG,GAAG,GAAGjB,GAAG,CAACG,KAAK,CAAC4B,MAAM,CAAC,IAAI,CAACd,KAAK,CAAC,CAAC,CAC9G;EACL,IAAI,IAAI,CAACC,MAAM,KAAKc,SAAS,EAAE;IAC3BF,KAAK,CAACG,IAAI,CAACJ,IAAI,GAAG,UAAU,GAAG7B,GAAG,CAACG,KAAK,CAAC4B,MAAM,CAAC,IAAI,CAACb,MAAM,CAAC,CAAC;EACjE;EACAY,KAAK,CAACG,IAAI,CAACN,IAAI,GAAG,GAAG,CAAC;EACtB,OAAOG,KAAK,CAACI,IAAI,CAAClC,GAAG,CAACC,EAAE,CAACkC,GAAG,CAAC;AACjC,CAAC;AAEDnC,GAAG,CAACG,KAAK,CAACiC,aAAa,CAACxB,gBAAgB,EAAE,YAAY;EAClD,OAAO,IAAI,CAACY,QAAQ,CAAC,CAAC;AAC1B,CAAC,CAAC;AAEFa,MAAM,CAACC,OAAO,GAAG;EACb1B,gBAAgB;EAChBP;AACJ,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}