{"ast":null,"code":"/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */\n\nconst {\n  PromiseAdapter\n} = require('./promise-adapter');\nconst {\n  DatabasePool\n} = require('./database-pool');\nconst {\n  PreparedStatement,\n  ParameterizedQuery\n} = require('./types');\nconst {\n  QueryFile\n} = require('./query-file');\nconst {\n  queryResult\n} = require('./query-result');\nconst {\n  parsePromise\n} = require('./promise-parser');\nconst {\n  assert\n} = require('./assert');\nconst npm = {\n  path: require('path'),\n  pg: require('pg'),\n  minify: require('pg-minify'),\n  formatting: require('./formatting'),\n  helpers: require('./helpers'),\n  errors: require('./errors'),\n  utils: require('./utils'),\n  pubUtils: require('./utils/public'),\n  mode: require('./tx-mode'),\n  package: require('../package.json'),\n  text: require('./text')\n};\nlet originalClientConnect;\n\n/**\r\n * @author Vitaly Tomilov\r\n * @module pg-promise\r\n *\r\n * @description\r\n * ## pg-promise v11.4\r\n * All documentation here is for the latest official release only.\r\n *\r\n * ### Initialization Options\r\n *\r\n * Below is the complete list of _Initialization Options_ for the library that can be passed in during\r\n * the library's initialization:\r\n *\r\n * ```js\r\n * const initOptions = {&#47;* options as documented below *&#47;};\r\n *\r\n * const pgp = require('pg-promise')(initOptions);\r\n * ```\r\n *\r\n * @property {{}} [options]\r\n * Library Initialization Options.\r\n *\r\n * @property {boolean} [options.pgFormatting=false]\r\n * Redirects all query formatting to the $[pg] driver.\r\n *\r\n * By default (`false`), the library uses its own advanced query-formatting engine.\r\n * If you set this option to a truthy value, query formatting will be done entirely by the\r\n * $[pg] driver, which means you won't be able to use any of the feature-rich query formatting\r\n * that this library implements, restricting yourself to the very basic `$1, $2,...` syntax.\r\n *\r\n * This option is dynamic (can be set before or after initialization).\r\n *\r\n * @property {boolean} [options.pgNative=false]\r\n * Use $[Native Bindings]. Library $[pg-native] must be included and installed independently, or else there will\r\n * be an error thrown: {@link external:Error Error} = `Failed to initialize Native Bindings.`\r\n *\r\n * This is a static option (can only be set prior to initialization).\r\n *\r\n * @property {object|function} [options.promiseLib=Promise]\r\n * Overrides the default (ES6 Promise) promise library for its internal use.\r\n *\r\n * Example below sets to use $[Bluebird] - the best and recommended promise library. It is the fastest one,\r\n * and supports $[Long Stack Traces], essential for debugging promises.\r\n *\r\n * ```js\r\n * const Promise = require('bluebird');\r\n * const initOptions = {\r\n *     promiseLib: Promise\r\n * };\r\n * const pgp = require('pg-promise')(initOptions);\r\n * ```\r\n *\r\n * All existing promise libraries are supported. The ones with recognizable signature are used automatically,\r\n * while the rest can be configured via the $[Promise Adapter].\r\n *\r\n * This is a static option (can only be set prior to initialization).\r\n *\r\n * @property {boolean} [options.capSQL=false]\r\n * Capitalizes any SQL generated by the library.\r\n *\r\n * By default, all internal SQL within the library is generated using the low case.\r\n * If, however, you want all SQL to be capitalized instead, set `capSQL` = `true`.\r\n *\r\n * It is purely a cosmetic feature.\r\n *\r\n * This option is dynamic (can be set before or after initialization).\r\n *\r\n * @property {string|Array<string>|null|undefined|function} [options.schema]\r\n * Forces change of the default database schema(s) for every fresh connection, i.e.\r\n * the library will execute `SET search_path TO schema_1, schema_2, ...` in the background\r\n * whenever a fresh physical connection is allocated.\r\n *\r\n * Normally, one changes the default schema(s) by $[changing the database or the role], but sometimes you\r\n * may want to switch the default schema(s) without persisting the change, and then use this option.\r\n *\r\n * It can be a string, an array of strings, or a callback function that takes `dc` (database context)\r\n * as the only parameter (and as `this`), and returns schema(s) according to the database context. A callback function\r\n * can also return nothing (`undefined` or `null`), if no schema change needed for the specified database context.\r\n *\r\n * The order of schema names matters, so if a table name exists in more than one schema, its default access resolves\r\n * to the table from the first such schema on the list.\r\n *\r\n * This option is dynamic (can be set before or after initialization).\r\n *\r\n * @property {boolean} [options.noWarnings=false]\r\n * Disables all diagnostic warnings in the library (it is ill-advised).\r\n *\r\n * This option is dynamic (can be set before or after initialization).\r\n *\r\n * @property {function} [options.connect]\r\n * Global event {@link event:connect connect} handler.\r\n *\r\n * This option is dynamic (can be set before or after initialization).\r\n *\r\n * @property {function} [options.disconnect]\r\n * Global event {@link event:disconnect disconnect} handler.\r\n *\r\n * This option is dynamic (can be set before or after initialization).\r\n *\r\n * @property {function} [options.query]\r\n * Global event {@link event:query query} handler.\r\n *\r\n * This option is dynamic (can be set before or after initialization).\r\n *\r\n * @property {function} [options.receive]\r\n * Global event {@link event:receive receive} handler.\r\n *\r\n * This option is dynamic (can be set before or after initialization).\r\n *\r\n * @property {function} [options.task]\r\n * Global event {@link event:task task} handler.\r\n *\r\n * This option is dynamic (can be set before or after initialization).\r\n *\r\n * @property {function} [options.transact]\r\n * Global event {@link event:transact transact} handler.\r\n *\r\n * This option is dynamic (can be set before or after initialization).\r\n *\r\n * @property {function} [options.error]\r\n * Global event {@link event:error error} handler.\r\n *\r\n * This option is dynamic (can be set before or after initialization).\r\n *\r\n * @property {function} [options.extend]\r\n * Global event {@link event:extend extend} handler.\r\n *\r\n * This option is dynamic (can be set before or after initialization).\r\n *\r\n * @see\r\n * {@link module:pg-promise~end end},\r\n * {@link module:pg-promise~as as},\r\n * {@link module:pg-promise~errors errors},\r\n * {@link module:pg-promise~helpers helpers},\r\n * {@link module:pg-promise~minify minify},\r\n * {@link module:pg-promise~ParameterizedQuery ParameterizedQuery},\r\n * {@link module:pg-promise~PreparedStatement PreparedStatement},\r\n * {@link module:pg-promise~pg pg},\r\n * {@link module:pg-promise~QueryFile QueryFile},\r\n * {@link module:pg-promise~queryResult queryResult},\r\n * {@link module:pg-promise~spex spex},\r\n * {@link module:pg-promise~txMode txMode},\r\n * {@link module:pg-promise~utils utils}\r\n *\r\n */\nfunction $main(options) {\n  options = assert(options, ['pgFormatting', 'pgNative', 'promiseLib', 'capSQL', 'noWarnings', 'connect', 'disconnect', 'query', 'receive', 'task', 'transact', 'error', 'extend', 'schema']);\n  let pg = npm.pg;\n  const p = parsePromise(options.promiseLib);\n  const config = {\n    version: npm.package.version,\n    promiseLib: p.promiseLib,\n    promise: p.promise\n  };\n  npm.utils.addReadProp(config, '$npm', {}, true);\n\n  // Locking properties that cannot be changed later:\n  npm.utils.addReadProp(options, 'promiseLib', options.promiseLib);\n  npm.utils.addReadProp(options, 'pgNative', !!options.pgNative);\n  config.options = options;\n\n  // istanbul ignore next:\n  // we do not cover code specific to Native Bindings\n  if (options.pgNative) {\n    pg = npm.pg.native;\n    if (npm.utils.isNull(pg)) {\n      throw new Error(npm.text.nativeError);\n    }\n  } else {\n    if (!originalClientConnect) {\n      originalClientConnect = pg.Client.prototype.connect;\n      pg.Client.prototype.connect = function () {\n        const handler = msg => {\n          if (msg.parameterName === 'server_version') {\n            this.serverVersion = msg.parameterValue;\n            this.connection.removeListener('parameterStatus', handler);\n          }\n        };\n        this.connection.on('parameterStatus', handler);\n        return originalClientConnect.call(this, ...arguments);\n      };\n    }\n  }\n  const Database = require('./database')(config);\n  const inst = (cn, dc) => {\n    if (npm.utils.isText(cn) || cn && typeof cn === 'object') {\n      return new Database(cn, dc, config);\n    }\n    throw new TypeError('Invalid connection details: ' + npm.utils.toJson(cn));\n  };\n  npm.utils.addReadProperties(inst, rootNameSpace);\n\n  /**\r\n   * @member {external:PG} pg\r\n   * @description\r\n   * Instance of the $[pg] library that's being used, depending on initialization option `pgNative`:\r\n   *  - regular `pg` module instance, without option `pgNative`, or equal to `false` (default)\r\n   *  - `pg` module instance with $[Native Bindings], if option `pgNative` was set.\r\n   *\r\n   * Available as `pgp.pg`, after initializing the library.\r\n   */\n  inst.pg = pg; // keep it modifiable, so the protocol can be mocked\n\n  /**\r\n   * @member {function} end\r\n   * @readonly\r\n   * @description\r\n   * Shuts down all connection pools created in the process, so it can terminate without delay.\r\n   * It is available as `pgp.end`, after initializing the library.\r\n   *\r\n   * All {@link Database} objects created previously can no longer be used, and their query methods will be rejecting\r\n   * with {@link external:Error Error} = `Connection pool of the database object has been destroyed.`\r\n   *\r\n   * And if you want to shut down only a specific connection pool, you do so via the {@link Database}\r\n   * object that owns the pool: `db.$pool.end()` (see {@link Database#$pool Database.$pool}).\r\n   *\r\n   * For more details see $[Library de-initialization].\r\n   */\n  npm.utils.addReadProp(inst, 'end', () => {\n    DatabasePool.shutDown();\n  });\n\n  /**\r\n   * @member {helpers} helpers\r\n   * @readonly\r\n   * @description\r\n   * Namespace for {@link helpers all query-formatting helper functions}.\r\n   *\r\n   * Available as `pgp.helpers`, after initializing the library.\r\n   *\r\n   * @see {@link helpers}.\r\n   */\n  npm.utils.addReadProp(inst, 'helpers', npm.helpers(config));\n\n  /**\r\n   * @member {external:spex} spex\r\n   * @readonly\r\n   * @description\r\n   * Initialized instance of the $[spex] module, used by the library within tasks and transactions.\r\n   *\r\n   * Available as `pgp.spex`, after initializing the library.\r\n   *\r\n   * @see\r\n   * {@link Task#batch},\r\n   * {@link Task#page},\r\n   * {@link Task#sequence}\r\n   */\n  npm.utils.addReadProp(inst, 'spex', config.$npm.spex);\n  config.pgp = inst;\n  return inst;\n}\nconst rootNameSpace = {\n  /**\r\n   * @member {formatting} as\r\n   * @readonly\r\n   * @description\r\n   * Namespace for {@link formatting all query-formatting functions}.\r\n   *\r\n   * Available as `pgp.as`, before and after initializing the library.\r\n   *\r\n   * @see {@link formatting}.\r\n   */\n  as: npm.formatting.as,\n  /**\r\n   * @member {external:pg-minify} minify\r\n   * @readonly\r\n   * @description\r\n   * Instance of the $[pg-minify] library used internally to minify SQL scripts.\r\n   *\r\n   * Available as `pgp.minify`, before and after initializing the library.\r\n   */\n  minify: npm.minify,\n  /**\r\n   * @member {queryResult} queryResult\r\n   * @readonly\r\n   * @description\r\n   * Query Result Mask enumerator.\r\n   *\r\n   * Available as `pgp.queryResult`, before and after initializing the library.\r\n   */\n  queryResult,\n  /**\r\n   * @member {PromiseAdapter} PromiseAdapter\r\n   * @readonly\r\n   * @description\r\n   * {@link PromiseAdapter} class.\r\n   *\r\n   * Available as `pgp.PromiseAdapter`, before and after initializing the library.\r\n   */\n  PromiseAdapter,\n  /**\r\n   * @member {ParameterizedQuery} ParameterizedQuery\r\n   * @readonly\r\n   * @description\r\n   * {@link ParameterizedQuery} class.\r\n   *\r\n   * Available as `pgp.ParameterizedQuery`, before and after initializing the library.\r\n   */\n  ParameterizedQuery,\n  /**\r\n   * @member {PreparedStatement} PreparedStatement\r\n   * @readonly\r\n   * @description\r\n   * {@link PreparedStatement} class.\r\n   *\r\n   * Available as `pgp.PreparedStatement`, before and after initializing the library.\r\n   */\n  PreparedStatement,\n  /**\r\n   * @member {QueryFile} QueryFile\r\n   * @readonly\r\n   * @description\r\n   * {@link QueryFile} class.\r\n   *\r\n   * Available as `pgp.QueryFile`, before and after initializing the library.\r\n   */\n  QueryFile,\n  /**\r\n   * @member {errors} errors\r\n   * @readonly\r\n   * @description\r\n   * {@link errors} - namespace for all error types.\r\n   *\r\n   * Available as `pgp.errors`, before and after initializing the library.\r\n   */\n  errors: npm.errors,\n  /**\r\n   * @member {utils} utils\r\n   * @readonly\r\n   * @description\r\n   * {@link utils} - namespace for utility functions.\r\n   *\r\n   * Available as `pgp.utils`, before and after initializing the library.\r\n   */\n  utils: npm.pubUtils,\n  /**\r\n   * @member {txMode} txMode\r\n   * @readonly\r\n   * @description\r\n   * {@link txMode Transaction Mode} namespace.\r\n   *\r\n   * Available as `pgp.txMode`, before and after initializing the library.\r\n   */\n  txMode: npm.mode\n};\nnpm.utils.addReadProperties($main, rootNameSpace);\nmodule.exports = $main;\n\n/**\r\n * @external Promise\r\n * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Promise\r\n */\n\n/**\r\n * @external PG\r\n * @see https://node-postgres.com\r\n */\n\n/**\r\n * @external Client\r\n * @see https://node-postgres.com/api/client\r\n */\n\n/**\r\n * @external pg-minify\r\n * @see https://github.com/vitaly-t/pg-minify\r\n */\n\n/**\r\n * @external spex\r\n * @see https://github.com/vitaly-t/spex\r\n */","map":{"version":3,"names":["PromiseAdapter","require","DatabasePool","PreparedStatement","ParameterizedQuery","QueryFile","queryResult","parsePromise","assert","npm","path","pg","minify","formatting","helpers","errors","utils","pubUtils","mode","package","text","originalClientConnect","$main","options","p","promiseLib","config","version","promise","addReadProp","pgNative","native","isNull","Error","nativeError","Client","prototype","connect","handler","msg","parameterName","serverVersion","parameterValue","connection","removeListener","on","call","arguments","Database","inst","cn","dc","isText","TypeError","toJson","addReadProperties","rootNameSpace","shutDown","$npm","spex","pgp","as","txMode","module","exports"],"sources":["/Users/luna/Library/Mobile Documents/com~apple~CloudDocs/GitHub/paucamcal.github.io/AESP/node_modules/pg-promise/lib/main.js"],"sourcesContent":["/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */\r\n\r\nconst {PromiseAdapter} = require('./promise-adapter');\r\nconst {DatabasePool} = require('./database-pool');\r\nconst {PreparedStatement, ParameterizedQuery} = require('./types');\r\nconst {QueryFile} = require('./query-file');\r\nconst {queryResult} = require('./query-result');\r\nconst {parsePromise} = require('./promise-parser');\r\nconst {assert} = require('./assert');\r\n\r\nconst npm = {\r\n    path: require('path'),\r\n    pg: require('pg'),\r\n    minify: require('pg-minify'),\r\n    formatting: require('./formatting'),\r\n    helpers: require('./helpers'),\r\n    errors: require('./errors'),\r\n    utils: require('./utils'),\r\n    pubUtils: require('./utils/public'),\r\n    mode: require('./tx-mode'),\r\n    package: require('../package.json'),\r\n    text: require('./text')\r\n};\r\n\r\nlet originalClientConnect;\r\n\r\n/**\r\n * @author Vitaly Tomilov\r\n * @module pg-promise\r\n *\r\n * @description\r\n * ## pg-promise v11.4\r\n * All documentation here is for the latest official release only.\r\n *\r\n * ### Initialization Options\r\n *\r\n * Below is the complete list of _Initialization Options_ for the library that can be passed in during\r\n * the library's initialization:\r\n *\r\n * ```js\r\n * const initOptions = {&#47;* options as documented below *&#47;};\r\n *\r\n * const pgp = require('pg-promise')(initOptions);\r\n * ```\r\n *\r\n * @property {{}} [options]\r\n * Library Initialization Options.\r\n *\r\n * @property {boolean} [options.pgFormatting=false]\r\n * Redirects all query formatting to the $[pg] driver.\r\n *\r\n * By default (`false`), the library uses its own advanced query-formatting engine.\r\n * If you set this option to a truthy value, query formatting will be done entirely by the\r\n * $[pg] driver, which means you won't be able to use any of the feature-rich query formatting\r\n * that this library implements, restricting yourself to the very basic `$1, $2,...` syntax.\r\n *\r\n * This option is dynamic (can be set before or after initialization).\r\n *\r\n * @property {boolean} [options.pgNative=false]\r\n * Use $[Native Bindings]. Library $[pg-native] must be included and installed independently, or else there will\r\n * be an error thrown: {@link external:Error Error} = `Failed to initialize Native Bindings.`\r\n *\r\n * This is a static option (can only be set prior to initialization).\r\n *\r\n * @property {object|function} [options.promiseLib=Promise]\r\n * Overrides the default (ES6 Promise) promise library for its internal use.\r\n *\r\n * Example below sets to use $[Bluebird] - the best and recommended promise library. It is the fastest one,\r\n * and supports $[Long Stack Traces], essential for debugging promises.\r\n *\r\n * ```js\r\n * const Promise = require('bluebird');\r\n * const initOptions = {\r\n *     promiseLib: Promise\r\n * };\r\n * const pgp = require('pg-promise')(initOptions);\r\n * ```\r\n *\r\n * All existing promise libraries are supported. The ones with recognizable signature are used automatically,\r\n * while the rest can be configured via the $[Promise Adapter].\r\n *\r\n * This is a static option (can only be set prior to initialization).\r\n *\r\n * @property {boolean} [options.capSQL=false]\r\n * Capitalizes any SQL generated by the library.\r\n *\r\n * By default, all internal SQL within the library is generated using the low case.\r\n * If, however, you want all SQL to be capitalized instead, set `capSQL` = `true`.\r\n *\r\n * It is purely a cosmetic feature.\r\n *\r\n * This option is dynamic (can be set before or after initialization).\r\n *\r\n * @property {string|Array<string>|null|undefined|function} [options.schema]\r\n * Forces change of the default database schema(s) for every fresh connection, i.e.\r\n * the library will execute `SET search_path TO schema_1, schema_2, ...` in the background\r\n * whenever a fresh physical connection is allocated.\r\n *\r\n * Normally, one changes the default schema(s) by $[changing the database or the role], but sometimes you\r\n * may want to switch the default schema(s) without persisting the change, and then use this option.\r\n *\r\n * It can be a string, an array of strings, or a callback function that takes `dc` (database context)\r\n * as the only parameter (and as `this`), and returns schema(s) according to the database context. A callback function\r\n * can also return nothing (`undefined` or `null`), if no schema change needed for the specified database context.\r\n *\r\n * The order of schema names matters, so if a table name exists in more than one schema, its default access resolves\r\n * to the table from the first such schema on the list.\r\n *\r\n * This option is dynamic (can be set before or after initialization).\r\n *\r\n * @property {boolean} [options.noWarnings=false]\r\n * Disables all diagnostic warnings in the library (it is ill-advised).\r\n *\r\n * This option is dynamic (can be set before or after initialization).\r\n *\r\n * @property {function} [options.connect]\r\n * Global event {@link event:connect connect} handler.\r\n *\r\n * This option is dynamic (can be set before or after initialization).\r\n *\r\n * @property {function} [options.disconnect]\r\n * Global event {@link event:disconnect disconnect} handler.\r\n *\r\n * This option is dynamic (can be set before or after initialization).\r\n *\r\n * @property {function} [options.query]\r\n * Global event {@link event:query query} handler.\r\n *\r\n * This option is dynamic (can be set before or after initialization).\r\n *\r\n * @property {function} [options.receive]\r\n * Global event {@link event:receive receive} handler.\r\n *\r\n * This option is dynamic (can be set before or after initialization).\r\n *\r\n * @property {function} [options.task]\r\n * Global event {@link event:task task} handler.\r\n *\r\n * This option is dynamic (can be set before or after initialization).\r\n *\r\n * @property {function} [options.transact]\r\n * Global event {@link event:transact transact} handler.\r\n *\r\n * This option is dynamic (can be set before or after initialization).\r\n *\r\n * @property {function} [options.error]\r\n * Global event {@link event:error error} handler.\r\n *\r\n * This option is dynamic (can be set before or after initialization).\r\n *\r\n * @property {function} [options.extend]\r\n * Global event {@link event:extend extend} handler.\r\n *\r\n * This option is dynamic (can be set before or after initialization).\r\n *\r\n * @see\r\n * {@link module:pg-promise~end end},\r\n * {@link module:pg-promise~as as},\r\n * {@link module:pg-promise~errors errors},\r\n * {@link module:pg-promise~helpers helpers},\r\n * {@link module:pg-promise~minify minify},\r\n * {@link module:pg-promise~ParameterizedQuery ParameterizedQuery},\r\n * {@link module:pg-promise~PreparedStatement PreparedStatement},\r\n * {@link module:pg-promise~pg pg},\r\n * {@link module:pg-promise~QueryFile QueryFile},\r\n * {@link module:pg-promise~queryResult queryResult},\r\n * {@link module:pg-promise~spex spex},\r\n * {@link module:pg-promise~txMode txMode},\r\n * {@link module:pg-promise~utils utils}\r\n *\r\n */\r\nfunction $main(options) {\r\n\r\n    options = assert(options, ['pgFormatting', 'pgNative', 'promiseLib', 'capSQL', 'noWarnings',\r\n        'connect', 'disconnect', 'query', 'receive', 'task', 'transact', 'error', 'extend', 'schema']);\r\n\r\n    let pg = npm.pg;\r\n    const p = parsePromise(options.promiseLib);\r\n\r\n    const config = {\r\n        version: npm.package.version,\r\n        promiseLib: p.promiseLib,\r\n        promise: p.promise\r\n    };\r\n\r\n    npm.utils.addReadProp(config, '$npm', {}, true);\r\n\r\n    // Locking properties that cannot be changed later:\r\n    npm.utils.addReadProp(options, 'promiseLib', options.promiseLib);\r\n    npm.utils.addReadProp(options, 'pgNative', !!options.pgNative);\r\n\r\n    config.options = options;\r\n\r\n    // istanbul ignore next:\r\n    // we do not cover code specific to Native Bindings\r\n    if (options.pgNative) {\r\n        pg = npm.pg.native;\r\n        if (npm.utils.isNull(pg)) {\r\n            throw new Error(npm.text.nativeError);\r\n        }\r\n    } else {\r\n        if (!originalClientConnect) {\r\n            originalClientConnect = pg.Client.prototype.connect;\r\n            pg.Client.prototype.connect = function () {\r\n                const handler = msg => {\r\n                    if (msg.parameterName === 'server_version') {\r\n                        this.serverVersion = msg.parameterValue;\r\n                        this.connection.removeListener('parameterStatus', handler);\r\n                    }\r\n                };\r\n                this.connection.on('parameterStatus', handler);\r\n                return originalClientConnect.call(this, ...arguments);\r\n            };\r\n        }\r\n    }\r\n\r\n    const Database = require('./database')(config);\r\n\r\n    const inst = (cn, dc) => {\r\n        if (npm.utils.isText(cn) || (cn && typeof cn === 'object')) {\r\n            return new Database(cn, dc, config);\r\n        }\r\n        throw new TypeError('Invalid connection details: ' + npm.utils.toJson(cn));\r\n    };\r\n\r\n    npm.utils.addReadProperties(inst, rootNameSpace);\r\n\r\n    /**\r\n     * @member {external:PG} pg\r\n     * @description\r\n     * Instance of the $[pg] library that's being used, depending on initialization option `pgNative`:\r\n     *  - regular `pg` module instance, without option `pgNative`, or equal to `false` (default)\r\n     *  - `pg` module instance with $[Native Bindings], if option `pgNative` was set.\r\n     *\r\n     * Available as `pgp.pg`, after initializing the library.\r\n     */\r\n    inst.pg = pg; // keep it modifiable, so the protocol can be mocked\r\n\r\n    /**\r\n     * @member {function} end\r\n     * @readonly\r\n     * @description\r\n     * Shuts down all connection pools created in the process, so it can terminate without delay.\r\n     * It is available as `pgp.end`, after initializing the library.\r\n     *\r\n     * All {@link Database} objects created previously can no longer be used, and their query methods will be rejecting\r\n     * with {@link external:Error Error} = `Connection pool of the database object has been destroyed.`\r\n     *\r\n     * And if you want to shut down only a specific connection pool, you do so via the {@link Database}\r\n     * object that owns the pool: `db.$pool.end()` (see {@link Database#$pool Database.$pool}).\r\n     *\r\n     * For more details see $[Library de-initialization].\r\n     */\r\n    npm.utils.addReadProp(inst, 'end', () => {\r\n        DatabasePool.shutDown();\r\n    });\r\n\r\n    /**\r\n     * @member {helpers} helpers\r\n     * @readonly\r\n     * @description\r\n     * Namespace for {@link helpers all query-formatting helper functions}.\r\n     *\r\n     * Available as `pgp.helpers`, after initializing the library.\r\n     *\r\n     * @see {@link helpers}.\r\n     */\r\n    npm.utils.addReadProp(inst, 'helpers', npm.helpers(config));\r\n\r\n    /**\r\n     * @member {external:spex} spex\r\n     * @readonly\r\n     * @description\r\n     * Initialized instance of the $[spex] module, used by the library within tasks and transactions.\r\n     *\r\n     * Available as `pgp.spex`, after initializing the library.\r\n     *\r\n     * @see\r\n     * {@link Task#batch},\r\n     * {@link Task#page},\r\n     * {@link Task#sequence}\r\n     */\r\n    npm.utils.addReadProp(inst, 'spex', config.$npm.spex);\r\n\r\n    config.pgp = inst;\r\n\r\n    return inst;\r\n}\r\n\r\nconst rootNameSpace = {\r\n\r\n    /**\r\n     * @member {formatting} as\r\n     * @readonly\r\n     * @description\r\n     * Namespace for {@link formatting all query-formatting functions}.\r\n     *\r\n     * Available as `pgp.as`, before and after initializing the library.\r\n     *\r\n     * @see {@link formatting}.\r\n     */\r\n    as: npm.formatting.as,\r\n\r\n    /**\r\n     * @member {external:pg-minify} minify\r\n     * @readonly\r\n     * @description\r\n     * Instance of the $[pg-minify] library used internally to minify SQL scripts.\r\n     *\r\n     * Available as `pgp.minify`, before and after initializing the library.\r\n     */\r\n    minify: npm.minify,\r\n\r\n    /**\r\n     * @member {queryResult} queryResult\r\n     * @readonly\r\n     * @description\r\n     * Query Result Mask enumerator.\r\n     *\r\n     * Available as `pgp.queryResult`, before and after initializing the library.\r\n     */\r\n    queryResult,\r\n\r\n    /**\r\n     * @member {PromiseAdapter} PromiseAdapter\r\n     * @readonly\r\n     * @description\r\n     * {@link PromiseAdapter} class.\r\n     *\r\n     * Available as `pgp.PromiseAdapter`, before and after initializing the library.\r\n     */\r\n    PromiseAdapter,\r\n\r\n    /**\r\n     * @member {ParameterizedQuery} ParameterizedQuery\r\n     * @readonly\r\n     * @description\r\n     * {@link ParameterizedQuery} class.\r\n     *\r\n     * Available as `pgp.ParameterizedQuery`, before and after initializing the library.\r\n     */\r\n    ParameterizedQuery,\r\n\r\n    /**\r\n     * @member {PreparedStatement} PreparedStatement\r\n     * @readonly\r\n     * @description\r\n     * {@link PreparedStatement} class.\r\n     *\r\n     * Available as `pgp.PreparedStatement`, before and after initializing the library.\r\n     */\r\n    PreparedStatement,\r\n\r\n    /**\r\n     * @member {QueryFile} QueryFile\r\n     * @readonly\r\n     * @description\r\n     * {@link QueryFile} class.\r\n     *\r\n     * Available as `pgp.QueryFile`, before and after initializing the library.\r\n     */\r\n    QueryFile,\r\n\r\n    /**\r\n     * @member {errors} errors\r\n     * @readonly\r\n     * @description\r\n     * {@link errors} - namespace for all error types.\r\n     *\r\n     * Available as `pgp.errors`, before and after initializing the library.\r\n     */\r\n    errors: npm.errors,\r\n\r\n    /**\r\n     * @member {utils} utils\r\n     * @readonly\r\n     * @description\r\n     * {@link utils} - namespace for utility functions.\r\n     *\r\n     * Available as `pgp.utils`, before and after initializing the library.\r\n     */\r\n    utils: npm.pubUtils,\r\n\r\n    /**\r\n     * @member {txMode} txMode\r\n     * @readonly\r\n     * @description\r\n     * {@link txMode Transaction Mode} namespace.\r\n     *\r\n     * Available as `pgp.txMode`, before and after initializing the library.\r\n     */\r\n    txMode: npm.mode\r\n};\r\n\r\nnpm.utils.addReadProperties($main, rootNameSpace);\r\n\r\nmodule.exports = $main;\r\n\r\n/**\r\n * @external Promise\r\n * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Promise\r\n */\r\n\r\n/**\r\n * @external PG\r\n * @see https://node-postgres.com\r\n */\r\n\r\n/**\r\n * @external Client\r\n * @see https://node-postgres.com/api/client\r\n */\r\n\r\n/**\r\n * @external pg-minify\r\n * @see https://github.com/vitaly-t/pg-minify\r\n */\r\n\r\n/**\r\n * @external spex\r\n * @see https://github.com/vitaly-t/spex\r\n */\r\n"],"mappings":"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A;AACA;AACA;AACA;EACIjD,MAAM,EAAEH,GAAG,CAACG,MAAM;EAElB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIN,WAAW;EAEX;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIN,cAAc;EAEd;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACII,kBAAkB;EAElB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACID,iBAAiB;EAEjB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIE,SAAS;EAET;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIU,MAAM,EAAEN,GAAG,CAACM,MAAM;EAElB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,KAAK,EAAEP,GAAG,CAACQ,QAAQ;EAEnB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACI6C,MAAM,EAAErD,GAAG,CAACS;AAChB,CAAC;AAEDT,GAAG,CAACO,KAAK,CAACuC,iBAAiB,CAACjC,KAAK,EAAEkC,aAAa,CAAC;AAEjDO,MAAM,CAACC,OAAO,GAAG1C,KAAK;;AAEtB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA"},"metadata":{},"sourceType":"script","externalDependencies":[]}