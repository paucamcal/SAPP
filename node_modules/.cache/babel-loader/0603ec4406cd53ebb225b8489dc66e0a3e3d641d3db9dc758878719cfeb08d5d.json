{"ast":null,"code":"const {\n  EOL\n} = require('os');\nconst {\n  addInspection,\n  messageGap\n} = require('./utils');\nconst parsingErrorCode = {\n  unclosedMLC: 0,\n  // Unclosed multi-line comment.\n  unclosedText: 1,\n  // Unclosed text block.\n  unclosedQI: 2,\n  // Unclosed quoted identifier.\n  multiLineQI: 3 // Multi-line quoted identifiers are not supported.\n};\n\nObject.freeze(parsingErrorCode);\nconst errorMessages = [{\n  name: 'unclosedMLC',\n  message: 'Unclosed multi-line comment.'\n}, {\n  name: 'unclosedText',\n  message: 'Unclosed text block.'\n}, {\n  name: 'unclosedQI',\n  message: 'Unclosed quoted identifier.'\n}, {\n  name: 'multiLineQI',\n  message: 'Multi-line quoted identifiers are not supported.'\n}];\nclass SQLParsingError extends Error {\n  constructor(code, position) {\n    const err = errorMessages[code].message;\n    const message = `Error parsing SQL at {line:${position.line},col:${position.column}}: ${err}`;\n    super(message);\n    this.name = this.constructor.name;\n    this.error = err;\n    this.code = code;\n    this.position = position;\n    Error.captureStackTrace(this, this.constructor);\n  }\n}\nSQLParsingError.prototype.toString = function (level) {\n  level = level > 0 ? parseInt(level) : 0;\n  const gap = messageGap(level + 1);\n  const lines = [`SQLParsingError {`, `${gap}code: parsingErrorCode.${errorMessages[this.code].name}`, `${gap}error: \"${this.error}\"`, `${gap}position: {line: ${this.position.line}, col: ${this.position.column}}`, `${messageGap(level)}}`];\n  return lines.join(EOL);\n};\naddInspection(SQLParsingError.prototype, function () {\n  return this.toString();\n});\nmodule.exports = {\n  SQLParsingError,\n  parsingErrorCode\n};","map":{"version":3,"names":["EOL","require","addInspection","messageGap","parsingErrorCode","unclosedMLC","unclosedText","unclosedQI","multiLineQI","Object","freeze","errorMessages","name","message","SQLParsingError","Error","constructor","code","position","err","line","column","error","captureStackTrace","prototype","toString","level","parseInt","gap","lines","join","module","exports"],"sources":["/Users/luna/Library/Mobile Documents/com~apple~CloudDocs/GitHub/paucamcal.github.io/AESP/node_modules/pg-minify/lib/error.js"],"sourcesContent":["const {EOL} = require('os');\r\nconst {addInspection, messageGap} = require('./utils');\r\n\r\nconst parsingErrorCode = {\r\n    unclosedMLC: 0, // Unclosed multi-line comment.\r\n    unclosedText: 1, // Unclosed text block.\r\n    unclosedQI: 2, // Unclosed quoted identifier.\r\n    multiLineQI: 3 // Multi-line quoted identifiers are not supported.\r\n};\r\n\r\nObject.freeze(parsingErrorCode);\r\n\r\nconst errorMessages = [\r\n    {name: 'unclosedMLC', message: 'Unclosed multi-line comment.'},\r\n    {name: 'unclosedText', message: 'Unclosed text block.'},\r\n    {name: 'unclosedQI', message: 'Unclosed quoted identifier.'},\r\n    {name: 'multiLineQI', message: 'Multi-line quoted identifiers are not supported.'}\r\n];\r\n\r\nclass SQLParsingError extends Error {\r\n    constructor(code, position) {\r\n        const err = errorMessages[code].message;\r\n        const message = `Error parsing SQL at {line:${position.line},col:${position.column}}: ${err}`;\r\n        super(message);\r\n        this.name = this.constructor.name;\r\n        this.error = err;\r\n        this.code = code;\r\n        this.position = position;\r\n        Error.captureStackTrace(this, this.constructor);\r\n    }\r\n}\r\n\r\nSQLParsingError.prototype.toString = function (level) {\r\n    level = level > 0 ? parseInt(level) : 0;\r\n    const gap = messageGap(level + 1);\r\n    const lines = [\r\n        `SQLParsingError {`,\r\n        `${gap}code: parsingErrorCode.${errorMessages[this.code].name}`,\r\n        `${gap}error: \"${this.error}\"`,\r\n        `${gap}position: {line: ${this.position.line}, col: ${this.position.column}}`,\r\n        `${messageGap(level)}}`\r\n    ];\r\n    return lines.join(EOL);\r\n};\r\n\r\naddInspection(SQLParsingError.prototype, function () {\r\n    return this.toString();\r\n});\r\n\r\nmodule.exports = {\r\n    SQLParsingError,\r\n    parsingErrorCode\r\n};\r\n"],"mappings":"AAAA,MAAM;EAACA;AAAG,CAAC,GAAGC,OAAO,CAAC,IAAI,CAAC;AAC3B,MAAM;EAACC,aAAa;EAAEC;AAAU,CAAC,GAAGF,OAAO,CAAC,SAAS,CAAC;AAEtD,MAAMG,gBAAgB,GAAG;EACrBC,WAAW,EAAE,CAAC;EAAE;EAChBC,YAAY,EAAE,CAAC;EAAE;EACjBC,UAAU,EAAE,CAAC;EAAE;EACfC,WAAW,EAAE,CAAC,CAAC;AACnB,CAAC;;AAEDC,MAAM,CAACC,MAAM,CAACN,gBAAgB,CAAC;AAE/B,MAAMO,aAAa,GAAG,CAClB;EAACC,IAAI,EAAE,aAAa;EAAEC,OAAO,EAAE;AAA8B,CAAC,EAC9D;EAACD,IAAI,EAAE,cAAc;EAAEC,OAAO,EAAE;AAAsB,CAAC,EACvD;EAACD,IAAI,EAAE,YAAY;EAAEC,OAAO,EAAE;AAA6B,CAAC,EAC5D;EAACD,IAAI,EAAE,aAAa;EAAEC,OAAO,EAAE;AAAkD,CAAC,CACrF;AAED,MAAMC,eAAe,SAASC,KAAK,CAAC;EAChCC,WAAWA,CAACC,IAAI,EAAEC,QAAQ,EAAE;IACxB,MAAMC,GAAG,GAAGR,aAAa,CAACM,IAAI,CAAC,CAACJ,OAAO;IACvC,MAAMA,OAAO,GAAI,8BAA6BK,QAAQ,CAACE,IAAK,QAAOF,QAAQ,CAACG,MAAO,MAAKF,GAAI,EAAC;IAC7F,KAAK,CAACN,OAAO,CAAC;IACd,IAAI,CAACD,IAAI,GAAG,IAAI,CAACI,WAAW,CAACJ,IAAI;IACjC,IAAI,CAACU,KAAK,GAAGH,GAAG;IAChB,IAAI,CAACF,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACC,QAAQ,GAAGA,QAAQ;IACxBH,KAAK,CAACQ,iBAAiB,CAAC,IAAI,EAAE,IAAI,CAACP,WAAW,CAAC;EACnD;AACJ;AAEAF,eAAe,CAACU,SAAS,CAACC,QAAQ,GAAG,UAAUC,KAAK,EAAE;EAClDA,KAAK,GAAGA,KAAK,GAAG,CAAC,GAAGC,QAAQ,CAACD,KAAK,CAAC,GAAG,CAAC;EACvC,MAAME,GAAG,GAAGzB,UAAU,CAACuB,KAAK,GAAG,CAAC,CAAC;EACjC,MAAMG,KAAK,GAAG,CACT,mBAAkB,EAClB,GAAED,GAAI,0BAAyBjB,aAAa,CAAC,IAAI,CAACM,IAAI,CAAC,CAACL,IAAK,EAAC,EAC9D,GAAEgB,GAAI,WAAU,IAAI,CAACN,KAAM,GAAE,EAC7B,GAAEM,GAAI,oBAAmB,IAAI,CAACV,QAAQ,CAACE,IAAK,UAAS,IAAI,CAACF,QAAQ,CAACG,MAAO,GAAE,EAC5E,GAAElB,UAAU,CAACuB,KAAK,CAAE,GAAE,CAC1B;EACD,OAAOG,KAAK,CAACC,IAAI,CAAC9B,GAAG,CAAC;AAC1B,CAAC;AAEDE,aAAa,CAACY,eAAe,CAACU,SAAS,EAAE,YAAY;EACjD,OAAO,IAAI,CAACC,QAAQ,CAAC,CAAC;AAC1B,CAAC,CAAC;AAEFM,MAAM,CAACC,OAAO,GAAG;EACblB,eAAe;EACfV;AACJ,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}