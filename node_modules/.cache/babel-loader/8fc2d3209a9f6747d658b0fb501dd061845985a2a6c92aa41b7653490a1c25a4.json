{"ast":null,"code":"/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */\n\nconst {\n  QueryFileError\n} = require('./query-file-error');\nconst npm = {\n  os: require('os'),\n  utils: require('../utils')\n};\n\n/**\r\n * @class errors.PreparedStatementError\r\n * @augments external:Error\r\n * @description\r\n * {@link errors.PreparedStatementError PreparedStatementError} class, available from the {@link errors} namespace.\r\n *\r\n * This type represents all errors that can be reported by class {@link PreparedStatement}, whether it is used\r\n * explicitly or implicitly (via a simple `{name, text, values}` object).\r\n *\r\n * @property {string} name\r\n * Standard {@link external:Error Error} property - error type name = `PreparedStatementError`.\r\n *\r\n * @property {string} message\r\n * Standard {@link external:Error Error} property - the error message.\r\n *\r\n * @property {string} stack\r\n * Standard {@link external:Error Error} property - the stack trace.\r\n *\r\n * @property {errors.QueryFileError} error\r\n * Internal {@link errors.QueryFileError} object.\r\n *\r\n * It is set only when the source {@link PreparedStatement} used a {@link QueryFile} which threw the error.\r\n *\r\n * @property {object} result\r\n * Resulting Prepared Statement object.\r\n *\r\n * @see PreparedStatement\r\n */\nclass PreparedStatementError extends Error {\n  constructor(error, ps) {\n    const isQueryFileError = error instanceof QueryFileError;\n    const message = isQueryFileError ? 'Failed to initialize \\'text\\' from a QueryFile.' : error;\n    super(message);\n    this.name = this.constructor.name;\n    if (isQueryFileError) {\n      this.error = error;\n    }\n    this.result = ps;\n    Error.captureStackTrace(this, this.constructor);\n  }\n}\n\n/**\r\n * @method errors.PreparedStatementError#toString\r\n * @description\r\n * Creates a well-formatted multi-line string that represents the error.\r\n *\r\n * It is called automatically when writing the object into the console.\r\n *\r\n * @param {number} [level=0]\r\n * Nested output level, to provide visual offset.\r\n *\r\n * @returns {string}\r\n */\nPreparedStatementError.prototype.toString = function (level) {\n  level = level > 0 ? parseInt(level) : 0;\n  const gap0 = npm.utils.messageGap(level),\n    gap1 = npm.utils.messageGap(level + 1),\n    gap2 = npm.utils.messageGap(level + 2),\n    lines = ['PreparedStatementError {', gap1 + 'message: \"' + this.message + '\"', gap1 + 'result: {', gap2 + 'name: ' + npm.utils.toJson(this.result.name), gap2 + 'text: ' + npm.utils.toJson(this.result.text), gap2 + 'values: ' + npm.utils.toJson(this.result.values), gap1 + '}'];\n  if (this.error) {\n    lines.push(gap1 + 'error: ' + this.error.toString(level + 1));\n  }\n  lines.push(gap0 + '}');\n  return lines.join(npm.os.EOL);\n};\nnpm.utils.addInspection(PreparedStatementError, function () {\n  return this.toString();\n});\nmodule.exports = {\n  PreparedStatementError\n};","map":{"version":3,"names":["QueryFileError","require","npm","os","utils","PreparedStatementError","Error","constructor","error","ps","isQueryFileError","message","name","result","captureStackTrace","prototype","toString","level","parseInt","gap0","messageGap","gap1","gap2","lines","toJson","text","values","push","join","EOL","addInspection","module","exports"],"sources":["/Users/luna/Library/Mobile Documents/com~apple~CloudDocs/GitHub/paucamcal.github.io/AESP/node_modules/pg-promise/lib/errors/prepared-statement-error.js"],"sourcesContent":["/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */\r\n\r\nconst {QueryFileError} = require('./query-file-error');\r\n\r\nconst npm = {\r\n    os: require('os'),\r\n    utils: require('../utils')\r\n};\r\n\r\n/**\r\n * @class errors.PreparedStatementError\r\n * @augments external:Error\r\n * @description\r\n * {@link errors.PreparedStatementError PreparedStatementError} class, available from the {@link errors} namespace.\r\n *\r\n * This type represents all errors that can be reported by class {@link PreparedStatement}, whether it is used\r\n * explicitly or implicitly (via a simple `{name, text, values}` object).\r\n *\r\n * @property {string} name\r\n * Standard {@link external:Error Error} property - error type name = `PreparedStatementError`.\r\n *\r\n * @property {string} message\r\n * Standard {@link external:Error Error} property - the error message.\r\n *\r\n * @property {string} stack\r\n * Standard {@link external:Error Error} property - the stack trace.\r\n *\r\n * @property {errors.QueryFileError} error\r\n * Internal {@link errors.QueryFileError} object.\r\n *\r\n * It is set only when the source {@link PreparedStatement} used a {@link QueryFile} which threw the error.\r\n *\r\n * @property {object} result\r\n * Resulting Prepared Statement object.\r\n *\r\n * @see PreparedStatement\r\n */\r\nclass PreparedStatementError extends Error {\r\n    constructor(error, ps) {\r\n        const isQueryFileError = error instanceof QueryFileError;\r\n        const message = isQueryFileError ? 'Failed to initialize \\'text\\' from a QueryFile.' : error;\r\n        super(message);\r\n        this.name = this.constructor.name;\r\n        if (isQueryFileError) {\r\n            this.error = error;\r\n        }\r\n        this.result = ps;\r\n        Error.captureStackTrace(this, this.constructor);\r\n    }\r\n}\r\n\r\n/**\r\n * @method errors.PreparedStatementError#toString\r\n * @description\r\n * Creates a well-formatted multi-line string that represents the error.\r\n *\r\n * It is called automatically when writing the object into the console.\r\n *\r\n * @param {number} [level=0]\r\n * Nested output level, to provide visual offset.\r\n *\r\n * @returns {string}\r\n */\r\nPreparedStatementError.prototype.toString = function (level) {\r\n    level = level > 0 ? parseInt(level) : 0;\r\n    const gap0 = npm.utils.messageGap(level),\r\n        gap1 = npm.utils.messageGap(level + 1),\r\n        gap2 = npm.utils.messageGap(level + 2),\r\n        lines = [\r\n            'PreparedStatementError {',\r\n            gap1 + 'message: \"' + this.message + '\"',\r\n            gap1 + 'result: {',\r\n            gap2 + 'name: ' + npm.utils.toJson(this.result.name),\r\n            gap2 + 'text: ' + npm.utils.toJson(this.result.text),\r\n            gap2 + 'values: ' + npm.utils.toJson(this.result.values),\r\n            gap1 + '}'\r\n        ];\r\n    if (this.error) {\r\n        lines.push(gap1 + 'error: ' + this.error.toString(level + 1));\r\n    }\r\n    lines.push(gap0 + '}');\r\n    return lines.join(npm.os.EOL);\r\n};\r\n\r\nnpm.utils.addInspection(PreparedStatementError, function () {\r\n    return this.toString();\r\n});\r\n\r\nmodule.exports = {PreparedStatementError};\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAM;EAACA;AAAc,CAAC,GAAGC,OAAO,CAAC,oBAAoB,CAAC;AAEtD,MAAMC,GAAG,GAAG;EACRC,EAAE,EAAEF,OAAO,CAAC,IAAI,CAAC;EACjBG,KAAK,EAAEH,OAAO,CAAC,UAAU;AAC7B,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMI,sBAAsB,SAASC,KAAK,CAAC;EACvCC,WAAWA,CAACC,KAAK,EAAEC,EAAE,EAAE;IACnB,MAAMC,gBAAgB,GAAGF,KAAK,YAAYR,cAAc;IACxD,MAAMW,OAAO,GAAGD,gBAAgB,GAAG,iDAAiD,GAAGF,KAAK;IAC5F,KAAK,CAACG,OAAO,CAAC;IACd,IAAI,CAACC,IAAI,GAAG,IAAI,CAACL,WAAW,CAACK,IAAI;IACjC,IAAIF,gBAAgB,EAAE;MAClB,IAAI,CAACF,KAAK,GAAGA,KAAK;IACtB;IACA,IAAI,CAACK,MAAM,GAAGJ,EAAE;IAChBH,KAAK,CAACQ,iBAAiB,CAAC,IAAI,EAAE,IAAI,CAACP,WAAW,CAAC;EACnD;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAF,sBAAsB,CAACU,SAAS,CAACC,QAAQ,GAAG,UAAUC,KAAK,EAAE;EACzDA,KAAK,GAAGA,KAAK,GAAG,CAAC,GAAGC,QAAQ,CAACD,KAAK,CAAC,GAAG,CAAC;EACvC,MAAME,IAAI,GAAGjB,GAAG,CAACE,KAAK,CAACgB,UAAU,CAACH,KAAK,CAAC;IACpCI,IAAI,GAAGnB,GAAG,CAACE,KAAK,CAACgB,UAAU,CAACH,KAAK,GAAG,CAAC,CAAC;IACtCK,IAAI,GAAGpB,GAAG,CAACE,KAAK,CAACgB,UAAU,CAACH,KAAK,GAAG,CAAC,CAAC;IACtCM,KAAK,GAAG,CACJ,0BAA0B,EAC1BF,IAAI,GAAG,YAAY,GAAG,IAAI,CAACV,OAAO,GAAG,GAAG,EACxCU,IAAI,GAAG,WAAW,EAClBC,IAAI,GAAG,QAAQ,GAAGpB,GAAG,CAACE,KAAK,CAACoB,MAAM,CAAC,IAAI,CAACX,MAAM,CAACD,IAAI,CAAC,EACpDU,IAAI,GAAG,QAAQ,GAAGpB,GAAG,CAACE,KAAK,CAACoB,MAAM,CAAC,IAAI,CAACX,MAAM,CAACY,IAAI,CAAC,EACpDH,IAAI,GAAG,UAAU,GAAGpB,GAAG,CAACE,KAAK,CAACoB,MAAM,CAAC,IAAI,CAACX,MAAM,CAACa,MAAM,CAAC,EACxDL,IAAI,GAAG,GAAG,CACb;EACL,IAAI,IAAI,CAACb,KAAK,EAAE;IACZe,KAAK,CAACI,IAAI,CAACN,IAAI,GAAG,SAAS,GAAG,IAAI,CAACb,KAAK,CAACQ,QAAQ,CAACC,KAAK,GAAG,CAAC,CAAC,CAAC;EACjE;EACAM,KAAK,CAACI,IAAI,CAACR,IAAI,GAAG,GAAG,CAAC;EACtB,OAAOI,KAAK,CAACK,IAAI,CAAC1B,GAAG,CAACC,EAAE,CAAC0B,GAAG,CAAC;AACjC,CAAC;AAED3B,GAAG,CAACE,KAAK,CAAC0B,aAAa,CAACzB,sBAAsB,EAAE,YAAY;EACxD,OAAO,IAAI,CAACW,QAAQ,CAAC,CAAC;AAC1B,CAAC,CAAC;AAEFe,MAAM,CAACC,OAAO,GAAG;EAAC3B;AAAsB,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}