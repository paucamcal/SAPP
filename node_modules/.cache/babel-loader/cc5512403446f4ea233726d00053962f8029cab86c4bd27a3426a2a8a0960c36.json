{"ast":null,"code":"/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */\n\nconst {\n  InnerState\n} = require('./inner-state');\nconst {\n  QueryFileError\n} = require('./errors');\nconst {\n  assert\n} = require('./assert');\nconst {\n  ColorConsole\n} = require('./utils/color');\nconst npm = {\n  fs: require('fs'),\n  os: require('os'),\n  path: require('path'),\n  minify: require('pg-minify'),\n  utils: require('./utils'),\n  formatting: require('./formatting')\n};\nconst file$query = Symbol('QueryFile.query');\n\n/**\r\n * @class QueryFile\r\n * @description\r\n *\r\n * Represents an external SQL file. The type is available from the library's root: `pgp.QueryFile`.\r\n *\r\n * Reads a file with SQL and prepares it for execution, also parses and minifies it, if required.\r\n * The SQL can be of any complexity, with both single and multi-line comments.\r\n *\r\n * The type can be used in place of the `query` parameter, with any query method directly, plus as `text` in {@link PreparedStatement}\r\n * and {@link ParameterizedQuery}.\r\n *\r\n * It never throws any error, leaving it for query methods to reject with {@link errors.QueryFileError QueryFileError}.\r\n *\r\n * **IMPORTANT:** You should only create a single reusable object per file, in order to avoid repeated file reads,\r\n * as the IO is a very expensive resource. If you do not follow it, you will be seeing the following warning:\r\n * `Creating a duplicate QueryFile object for the same file`, which signals a bad-use pattern.\r\n *\r\n * @param {string} file\r\n * Path to the SQL file with the query, either absolute or relative to the application's entry point file.\r\n *\r\n * If there is any problem reading the file, it will be reported when executing the query.\r\n *\r\n * @param {QueryFile.Options} [options]\r\n * Set of configuration options, as documented by {@link QueryFile.Options}.\r\n *\r\n * @returns {QueryFile}\r\n *\r\n * @see\r\n * {@link errors.QueryFileError QueryFileError},\r\n * {@link QueryFile#toPostgres toPostgres}\r\n *\r\n * @example\r\n * // File sql.js\r\n *\r\n * // Proper way to organize an sql provider:\r\n * //\r\n * // - have all sql files for Users in ./sql/users\r\n * // - have all sql files for Products in ./sql/products\r\n * // - have your sql provider module as ./sql/index.js\r\n *\r\n * const {QueryFile} = require('pg-promise');\r\n * const {join: joinPath} = require('path');\r\n *\r\n * // Helper for linking to external query files:\r\n * function sql(file) {\r\n *     const fullPath = joinPath(__dirname, file); // generating full path;\r\n *     return new QueryFile(fullPath, {minify: true});\r\n * }\r\n *\r\n * module.exports = {\r\n *     // external queries for Users:\r\n *     users: {\r\n *         add: sql('users/create.sql'),\r\n *         search: sql('users/search.sql'),\r\n *         report: sql('users/report.sql'),\r\n *     },\r\n *     // external queries for Products:\r\n *     products: {\r\n *         add: sql('products/add.sql'),\r\n *         quote: sql('products/quote.sql'),\r\n *         search: sql('products/search.sql'),\r\n *     }\r\n * };\r\n *\r\n * @example\r\n * // Testing our SQL provider\r\n *\r\n * const db = require('./db'); // our database module;\r\n * const {users: sql} = require('./sql'); // sql for users;\r\n *\r\n * module.exports = {\r\n *     addUser: (name, age) => db.none(sql.add, [name, age]),\r\n *     findUser: name => db.any(sql.search, name)\r\n * };\r\n *\r\n */\nclass QueryFile extends InnerState {\n  constructor(file, options) {\n    let filePath = file;\n    options = assert(options, {\n      debug: npm.utils.isDev(),\n      minify: options && options.compress && options.minify === undefined ? true : undefined,\n      compress: undefined,\n      params: undefined,\n      noWarnings: undefined\n    });\n    if (npm.utils.isText(filePath) && !npm.path.isAbsolute(filePath)) {\n      filePath = npm.path.join(npm.utils.startDir, filePath);\n    }\n    const {\n      usedPath\n    } = QueryFile.instance;\n\n    // istanbul ignore next:\n    if (!options.noWarnings) {\n      if (filePath in usedPath) {\n        usedPath[filePath]++;\n        ColorConsole.warn(`WARNING: Creating a duplicate QueryFile object for the same file - \\n    ${filePath}\\n${npm.utils.getLocalStack(2, 3)}\\n`);\n      } else {\n        usedPath[filePath] = 0;\n      }\n    }\n    const _inner = {\n      file,\n      filePath,\n      options,\n      sql: undefined,\n      error: undefined,\n      ready: undefined,\n      modTime: undefined\n    };\n    super(_inner);\n    this.prepare();\n  }\n\n  /**\r\n   * Global instance of the file-path repository.\r\n   *\r\n   * @return {{usedPath: {}}}\r\n   */\n  static get instance() {\n    const s = Symbol.for('pgPromiseQueryFile');\n    let scope = global[s];\n    if (!scope) {\n      scope = {\n        usedPath: {} // used-path look-up dictionary\n      };\n\n      global[s] = scope;\n    }\n    return scope;\n  }\n\n  /**\r\n   * @name QueryFile#Symbol(QueryFile.$query)\r\n   * @type {string}\r\n   * @default undefined\r\n   * @readonly\r\n   * @private\r\n   * @summary Prepared query string.\r\n   * @description\r\n   * When property {@link QueryFile#error error} is set, the query is `undefined`.\r\n   *\r\n   * **IMPORTANT:** This property is for internal use by the library only, never use this\r\n   * property directly from your code.\r\n   */\n  get [file$query]() {\n    return this._inner.sql;\n  }\n\n  /**\r\n   * @name QueryFile#error\r\n   * @type {errors.QueryFileError}\r\n   * @default undefined\r\n   * @readonly\r\n   * @description\r\n   * When in an error state, it is set to a {@link errors.QueryFileError QueryFileError} object. Otherwise, it is `undefined`.\r\n   */\n  get error() {\n    return this._inner.error;\n  }\n\n  /**\r\n   * @name QueryFile#file\r\n   * @type {string}\r\n   * @readonly\r\n   * @description\r\n   * File name that was passed into the constructor.\r\n   *\r\n   * This property is primarily for internal use by the library.\r\n   */\n  get file() {\n    return this._inner.file;\n  }\n\n  /**\r\n   * @name QueryFile#options\r\n   * @type {QueryFile.Options}\r\n   * @readonly\r\n   * @description\r\n   * Set of options, as configured during the object's construction.\r\n   *\r\n   * This property is primarily for internal use by the library.\r\n   */\n  get options() {\n    return this._inner.options;\n  }\n\n  /**\r\n   * @summary Prepares the query for execution.\r\n   * @description\r\n   * If the query hasn't been prepared yet, it will read the file and process the content according\r\n   * to the parameters passed into the constructor.\r\n   *\r\n   * This method is primarily for internal use by the library.\r\n   *\r\n   * @param {boolean} [throwErrors=false]\r\n   * Throw any error encountered.\r\n   */\n  prepare(throwErrors) {\n    const i = this._inner,\n      options = i.options;\n    let lastMod;\n    if (options.debug && i.ready) {\n      try {\n        lastMod = npm.fs.statSync(i.filePath).mtime.getTime();\n        // istanbul ignore if;\n        if (lastMod === i.modTime) {\n          return;\n        }\n        i.ready = false;\n      } catch (e) {\n        i.sql = undefined;\n        i.ready = false;\n        i.error = e;\n        if (throwErrors) {\n          throw i.error;\n        }\n        return;\n      }\n    }\n    if (i.ready) {\n      return;\n    }\n    try {\n      i.sql = npm.fs.readFileSync(i.filePath, 'utf8');\n      i.modTime = lastMod || npm.fs.statSync(i.filePath).mtime.getTime();\n      if (options.minify && options.minify !== 'after') {\n        i.sql = npm.minify(i.sql, {\n          compress: options.compress\n        });\n      }\n      if (options.params !== undefined) {\n        i.sql = npm.formatting.as.format(i.sql, options.params, {\n          partial: true\n        });\n      }\n      if (options.minify && options.minify === 'after') {\n        i.sql = npm.minify(i.sql, {\n          compress: options.compress\n        });\n      }\n      i.ready = true;\n      i.error = undefined;\n    } catch (e) {\n      i.sql = undefined;\n      i.error = new QueryFileError(e, this);\n      if (throwErrors) {\n        throw i.error;\n      }\n    }\n  }\n}\n\n// Hiding the query as a symbol within the type,\n// to make it even more difficult to misuse it:\nQueryFile.$query = file$query;\n\n/**\r\n * @method QueryFile#toPostgres\r\n * @description\r\n * $[Custom Type Formatting], based on $[Symbolic CTF], i.e. the actual method is available only via {@link external:Symbol Symbol}:\r\n *\r\n * ```js\r\n * const ctf = pgp.as.ctf; // Custom Type Formatting symbols namespace\r\n * const query = qf[ctf.toPostgres](); // qf = an object of type QueryFile\r\n * ```\r\n *\r\n * This is a raw formatting type (`rawType = true`), i.e. when used as a query-formatting parameter, type `QueryFile` injects SQL as raw text.\r\n *\r\n * If you need to support type `QueryFile` outside of query methods, this is the only safe way to get the most current SQL.\r\n * And you would want to use this method dynamically, as it reloads the SQL automatically, if option `debug` is set.\r\n * See {@link QueryFile.Options Options}.\r\n *\r\n * @param {QueryFile} [self]\r\n * Optional self-reference, for ES6 arrow functions.\r\n *\r\n * @returns {string}\r\n * SQL string from the file, according to the {@link QueryFile.Options options} specified.\r\n *\r\n */\nQueryFile.prototype[npm.formatting.as.ctf.toPostgres] = function (self) {\n  self = this instanceof QueryFile && this || self;\n  self.prepare(true);\n  return self[QueryFile.$query];\n};\nQueryFile.prototype[npm.formatting.as.ctf.rawType] = true; // use as pre-formatted\n\n/**\r\n * @method QueryFile#toString\r\n * @description\r\n * Creates a well-formatted multi-line string that represents the object's current state.\r\n *\r\n * It is called automatically when writing the object into the console.\r\n *\r\n * @param {number} [level=0]\r\n * Nested output level, to provide visual offset.\r\n *\r\n * @returns {string}\r\n */\nQueryFile.prototype.toString = function (level) {\n  level = level > 0 ? parseInt(level) : 0;\n  const gap = npm.utils.messageGap(level + 1);\n  const lines = ['QueryFile {'];\n  this.prepare();\n  lines.push(gap + 'file: \"' + this.file + '\"');\n  lines.push(gap + 'options: ' + npm.utils.toJson(this.options));\n  if (this.error) {\n    lines.push(gap + 'error: ' + this.error.toString(level + 1));\n  } else {\n    lines.push(gap + 'query: \"' + this[QueryFile.$query] + '\"');\n  }\n  lines.push(npm.utils.messageGap(level) + '}');\n  return lines.join(npm.os.EOL);\n};\nnpm.utils.addInspection(QueryFile, function () {\n  return this.toString();\n});\nmodule.exports = {\n  QueryFile\n};\n\n/**\r\n * @typedef QueryFile.Options\r\n * @description\r\n * A set of configuration options as passed into the {@link QueryFile} constructor.\r\n *\r\n * @property {boolean} debug\r\n * When in debug mode, the query file is checked for its last modification time on every query request,\r\n * so if it changes, the file is read afresh.\r\n *\r\n * The default for this property is `true` when `NODE_ENV` = `development`,\r\n * or `false` otherwise.\r\n *\r\n * @property {boolean|string} minify=false\r\n * Parses and minifies the SQL using $[pg-minify]:\r\n * - `false` - do not use $[pg-minify]\r\n * - `true` - use $[pg-minify] to parse and minify SQL\r\n * - `'after'` - use $[pg-minify] after applying static formatting parameters\r\n *   (option `params`), as opposed to before it (default)\r\n *\r\n * If option `compress` is set, then the default for `minify` is `true`.\r\n *\r\n * Failure to parse SQL will result in $[SQLParsingError].\r\n *\r\n * @property {boolean} compress=false\r\n * Sets option `compress` as supported by $[pg-minify], to uglify the SQL:\r\n * - `false` - no compression to be applied, keep minimum spaces for easier read\r\n * - `true` - remove all unnecessary spaces from SQL\r\n *\r\n * This option has no meaning, if `minify` is explicitly set to `false`. However, if `minify` is not\r\n * specified and `compress` is specified as `true`, then `minify` defaults to `true`.\r\n *\r\n * @property {array|object|value} params\r\n *\r\n * Static formatting parameters to be applied to the SQL, using the same method {@link formatting.format as.format},\r\n * but with option `partial` = `true`.\r\n *\r\n * Most of the time query formatting is fully dynamic, and applied just before executing the query.\r\n * In some cases though you may need to pre-format SQL with static values. Examples of it can be a\r\n * schema name, or a configurable table name.\r\n *\r\n * This option makes two-step SQL formatting easy: you can pre-format the SQL initially, and then\r\n * apply the second-step dynamic formatting when executing the query.\r\n *\r\n * @property {boolean} noWarnings=false\r\n * Suppresses all warnings produced by the class. It is not recommended for general use, only in specific tests\r\n * that may require it.\r\n *\r\n */","map":{"version":3,"names":["InnerState","require","QueryFileError","assert","ColorConsole","npm","fs","os","path","minify","utils","formatting","file$query","Symbol","QueryFile","constructor","file","options","filePath","debug","isDev","compress","undefined","params","noWarnings","isText","isAbsolute","join","startDir","usedPath","instance","warn","getLocalStack","_inner","sql","error","ready","modTime","prepare","s","for","scope","global","throwErrors","i","lastMod","statSync","mtime","getTime","e","readFileSync","as","format","partial","$query","prototype","ctf","toPostgres","self","rawType","toString","level","parseInt","gap","messageGap","lines","push","toJson","EOL","addInspection","module","exports"],"sources":["/Users/luna/Library/Mobile Documents/com~apple~CloudDocs/GitHub/paucamcal.github.io/AESP/node_modules/pg-promise/lib/query-file.js"],"sourcesContent":["/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */\r\n\r\nconst {InnerState} = require('./inner-state');\r\nconst {QueryFileError} = require('./errors');\r\nconst {assert} = require('./assert');\r\nconst {ColorConsole} = require('./utils/color');\r\n\r\nconst npm = {\r\n    fs: require('fs'),\r\n    os: require('os'),\r\n    path: require('path'),\r\n    minify: require('pg-minify'),\r\n    utils: require('./utils'),\r\n    formatting: require('./formatting')\r\n};\r\n\r\nconst file$query = Symbol('QueryFile.query');\r\n\r\n/**\r\n * @class QueryFile\r\n * @description\r\n *\r\n * Represents an external SQL file. The type is available from the library's root: `pgp.QueryFile`.\r\n *\r\n * Reads a file with SQL and prepares it for execution, also parses and minifies it, if required.\r\n * The SQL can be of any complexity, with both single and multi-line comments.\r\n *\r\n * The type can be used in place of the `query` parameter, with any query method directly, plus as `text` in {@link PreparedStatement}\r\n * and {@link ParameterizedQuery}.\r\n *\r\n * It never throws any error, leaving it for query methods to reject with {@link errors.QueryFileError QueryFileError}.\r\n *\r\n * **IMPORTANT:** You should only create a single reusable object per file, in order to avoid repeated file reads,\r\n * as the IO is a very expensive resource. If you do not follow it, you will be seeing the following warning:\r\n * `Creating a duplicate QueryFile object for the same file`, which signals a bad-use pattern.\r\n *\r\n * @param {string} file\r\n * Path to the SQL file with the query, either absolute or relative to the application's entry point file.\r\n *\r\n * If there is any problem reading the file, it will be reported when executing the query.\r\n *\r\n * @param {QueryFile.Options} [options]\r\n * Set of configuration options, as documented by {@link QueryFile.Options}.\r\n *\r\n * @returns {QueryFile}\r\n *\r\n * @see\r\n * {@link errors.QueryFileError QueryFileError},\r\n * {@link QueryFile#toPostgres toPostgres}\r\n *\r\n * @example\r\n * // File sql.js\r\n *\r\n * // Proper way to organize an sql provider:\r\n * //\r\n * // - have all sql files for Users in ./sql/users\r\n * // - have all sql files for Products in ./sql/products\r\n * // - have your sql provider module as ./sql/index.js\r\n *\r\n * const {QueryFile} = require('pg-promise');\r\n * const {join: joinPath} = require('path');\r\n *\r\n * // Helper for linking to external query files:\r\n * function sql(file) {\r\n *     const fullPath = joinPath(__dirname, file); // generating full path;\r\n *     return new QueryFile(fullPath, {minify: true});\r\n * }\r\n *\r\n * module.exports = {\r\n *     // external queries for Users:\r\n *     users: {\r\n *         add: sql('users/create.sql'),\r\n *         search: sql('users/search.sql'),\r\n *         report: sql('users/report.sql'),\r\n *     },\r\n *     // external queries for Products:\r\n *     products: {\r\n *         add: sql('products/add.sql'),\r\n *         quote: sql('products/quote.sql'),\r\n *         search: sql('products/search.sql'),\r\n *     }\r\n * };\r\n *\r\n * @example\r\n * // Testing our SQL provider\r\n *\r\n * const db = require('./db'); // our database module;\r\n * const {users: sql} = require('./sql'); // sql for users;\r\n *\r\n * module.exports = {\r\n *     addUser: (name, age) => db.none(sql.add, [name, age]),\r\n *     findUser: name => db.any(sql.search, name)\r\n * };\r\n *\r\n */\r\nclass QueryFile extends InnerState {\r\n\r\n    constructor(file, options) {\r\n\r\n        let filePath = file;\r\n\r\n        options = assert(options, {\r\n            debug: npm.utils.isDev(),\r\n            minify: (options && options.compress && options.minify === undefined) ? true : undefined,\r\n            compress: undefined,\r\n            params: undefined,\r\n            noWarnings: undefined\r\n        });\r\n\r\n        if (npm.utils.isText(filePath) && !npm.path.isAbsolute(filePath)) {\r\n            filePath = npm.path.join(npm.utils.startDir, filePath);\r\n        }\r\n\r\n        const {usedPath} = QueryFile.instance;\r\n\r\n        // istanbul ignore next:\r\n        if (!options.noWarnings) {\r\n            if (filePath in usedPath) {\r\n                usedPath[filePath]++;\r\n                ColorConsole.warn(`WARNING: Creating a duplicate QueryFile object for the same file - \\n    ${filePath}\\n${npm.utils.getLocalStack(2, 3)}\\n`);\r\n            } else {\r\n                usedPath[filePath] = 0;\r\n            }\r\n        }\r\n\r\n        const _inner = {\r\n            file,\r\n            filePath,\r\n            options,\r\n            sql: undefined,\r\n            error: undefined,\r\n            ready: undefined,\r\n            modTime: undefined\r\n        };\r\n\r\n        super(_inner);\r\n\r\n        this.prepare();\r\n    }\r\n\r\n    /**\r\n     * Global instance of the file-path repository.\r\n     *\r\n     * @return {{usedPath: {}}}\r\n     */\r\n    static get instance() {\r\n        const s = Symbol.for('pgPromiseQueryFile');\r\n        let scope = global[s];\r\n        if (!scope) {\r\n            scope = {\r\n                usedPath: {} // used-path look-up dictionary\r\n            };\r\n            global[s] = scope;\r\n        }\r\n        return scope;\r\n    }\r\n\r\n    /**\r\n     * @name QueryFile#Symbol(QueryFile.$query)\r\n     * @type {string}\r\n     * @default undefined\r\n     * @readonly\r\n     * @private\r\n     * @summary Prepared query string.\r\n     * @description\r\n     * When property {@link QueryFile#error error} is set, the query is `undefined`.\r\n     *\r\n     * **IMPORTANT:** This property is for internal use by the library only, never use this\r\n     * property directly from your code.\r\n     */\r\n    get [file$query]() {\r\n        return this._inner.sql;\r\n    }\r\n\r\n    /**\r\n     * @name QueryFile#error\r\n     * @type {errors.QueryFileError}\r\n     * @default undefined\r\n     * @readonly\r\n     * @description\r\n     * When in an error state, it is set to a {@link errors.QueryFileError QueryFileError} object. Otherwise, it is `undefined`.\r\n     */\r\n    get error() {\r\n        return this._inner.error;\r\n    }\r\n\r\n    /**\r\n     * @name QueryFile#file\r\n     * @type {string}\r\n     * @readonly\r\n     * @description\r\n     * File name that was passed into the constructor.\r\n     *\r\n     * This property is primarily for internal use by the library.\r\n     */\r\n    get file() {\r\n        return this._inner.file;\r\n    }\r\n\r\n    /**\r\n     * @name QueryFile#options\r\n     * @type {QueryFile.Options}\r\n     * @readonly\r\n     * @description\r\n     * Set of options, as configured during the object's construction.\r\n     *\r\n     * This property is primarily for internal use by the library.\r\n     */\r\n    get options() {\r\n        return this._inner.options;\r\n    }\r\n\r\n    /**\r\n     * @summary Prepares the query for execution.\r\n     * @description\r\n     * If the query hasn't been prepared yet, it will read the file and process the content according\r\n     * to the parameters passed into the constructor.\r\n     *\r\n     * This method is primarily for internal use by the library.\r\n     *\r\n     * @param {boolean} [throwErrors=false]\r\n     * Throw any error encountered.\r\n     */\r\n    prepare(throwErrors) {\r\n        const i = this._inner, options = i.options;\r\n        let lastMod;\r\n        if (options.debug && i.ready) {\r\n            try {\r\n                lastMod = npm.fs.statSync(i.filePath).mtime.getTime();\r\n                // istanbul ignore if;\r\n                if (lastMod === i.modTime) {\r\n                    return;\r\n                }\r\n                i.ready = false;\r\n            } catch (e) {\r\n                i.sql = undefined;\r\n                i.ready = false;\r\n                i.error = e;\r\n                if (throwErrors) {\r\n                    throw i.error;\r\n                }\r\n                return;\r\n            }\r\n        }\r\n        if (i.ready) {\r\n            return;\r\n        }\r\n        try {\r\n            i.sql = npm.fs.readFileSync(i.filePath, 'utf8');\r\n            i.modTime = lastMod || npm.fs.statSync(i.filePath).mtime.getTime();\r\n            if (options.minify && options.minify !== 'after') {\r\n                i.sql = npm.minify(i.sql, {compress: options.compress});\r\n            }\r\n            if (options.params !== undefined) {\r\n                i.sql = npm.formatting.as.format(i.sql, options.params, {partial: true});\r\n            }\r\n            if (options.minify && options.minify === 'after') {\r\n                i.sql = npm.minify(i.sql, {compress: options.compress});\r\n            }\r\n            i.ready = true;\r\n            i.error = undefined;\r\n        } catch (e) {\r\n            i.sql = undefined;\r\n            i.error = new QueryFileError(e, this);\r\n            if (throwErrors) {\r\n                throw i.error;\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n\r\n// Hiding the query as a symbol within the type,\r\n// to make it even more difficult to misuse it:\r\nQueryFile.$query = file$query;\r\n\r\n/**\r\n * @method QueryFile#toPostgres\r\n * @description\r\n * $[Custom Type Formatting], based on $[Symbolic CTF], i.e. the actual method is available only via {@link external:Symbol Symbol}:\r\n *\r\n * ```js\r\n * const ctf = pgp.as.ctf; // Custom Type Formatting symbols namespace\r\n * const query = qf[ctf.toPostgres](); // qf = an object of type QueryFile\r\n * ```\r\n *\r\n * This is a raw formatting type (`rawType = true`), i.e. when used as a query-formatting parameter, type `QueryFile` injects SQL as raw text.\r\n *\r\n * If you need to support type `QueryFile` outside of query methods, this is the only safe way to get the most current SQL.\r\n * And you would want to use this method dynamically, as it reloads the SQL automatically, if option `debug` is set.\r\n * See {@link QueryFile.Options Options}.\r\n *\r\n * @param {QueryFile} [self]\r\n * Optional self-reference, for ES6 arrow functions.\r\n *\r\n * @returns {string}\r\n * SQL string from the file, according to the {@link QueryFile.Options options} specified.\r\n *\r\n */\r\nQueryFile.prototype[npm.formatting.as.ctf.toPostgres] = function (self) {\r\n    self = this instanceof QueryFile && this || self;\r\n    self.prepare(true);\r\n    return self[QueryFile.$query];\r\n};\r\n\r\nQueryFile.prototype[npm.formatting.as.ctf.rawType] = true; // use as pre-formatted\r\n\r\n/**\r\n * @method QueryFile#toString\r\n * @description\r\n * Creates a well-formatted multi-line string that represents the object's current state.\r\n *\r\n * It is called automatically when writing the object into the console.\r\n *\r\n * @param {number} [level=0]\r\n * Nested output level, to provide visual offset.\r\n *\r\n * @returns {string}\r\n */\r\nQueryFile.prototype.toString = function (level) {\r\n    level = level > 0 ? parseInt(level) : 0;\r\n    const gap = npm.utils.messageGap(level + 1);\r\n    const lines = [\r\n        'QueryFile {'\r\n    ];\r\n    this.prepare();\r\n    lines.push(gap + 'file: \"' + this.file + '\"');\r\n    lines.push(gap + 'options: ' + npm.utils.toJson(this.options));\r\n    if (this.error) {\r\n        lines.push(gap + 'error: ' + this.error.toString(level + 1));\r\n    } else {\r\n        lines.push(gap + 'query: \"' + this[QueryFile.$query] + '\"');\r\n    }\r\n    lines.push(npm.utils.messageGap(level) + '}');\r\n    return lines.join(npm.os.EOL);\r\n};\r\n\r\nnpm.utils.addInspection(QueryFile, function () {\r\n    return this.toString();\r\n});\r\n\r\nmodule.exports = {QueryFile};\r\n\r\n/**\r\n * @typedef QueryFile.Options\r\n * @description\r\n * A set of configuration options as passed into the {@link QueryFile} constructor.\r\n *\r\n * @property {boolean} debug\r\n * When in debug mode, the query file is checked for its last modification time on every query request,\r\n * so if it changes, the file is read afresh.\r\n *\r\n * The default for this property is `true` when `NODE_ENV` = `development`,\r\n * or `false` otherwise.\r\n *\r\n * @property {boolean|string} minify=false\r\n * Parses and minifies the SQL using $[pg-minify]:\r\n * - `false` - do not use $[pg-minify]\r\n * - `true` - use $[pg-minify] to parse and minify SQL\r\n * - `'after'` - use $[pg-minify] after applying static formatting parameters\r\n *   (option `params`), as opposed to before it (default)\r\n *\r\n * If option `compress` is set, then the default for `minify` is `true`.\r\n *\r\n * Failure to parse SQL will result in $[SQLParsingError].\r\n *\r\n * @property {boolean} compress=false\r\n * Sets option `compress` as supported by $[pg-minify], to uglify the SQL:\r\n * - `false` - no compression to be applied, keep minimum spaces for easier read\r\n * - `true` - remove all unnecessary spaces from SQL\r\n *\r\n * This option has no meaning, if `minify` is explicitly set to `false`. However, if `minify` is not\r\n * specified and `compress` is specified as `true`, then `minify` defaults to `true`.\r\n *\r\n * @property {array|object|value} params\r\n *\r\n * Static formatting parameters to be applied to the SQL, using the same method {@link formatting.format as.format},\r\n * but with option `partial` = `true`.\r\n *\r\n * Most of the time query formatting is fully dynamic, and applied just before executing the query.\r\n * In some cases though you may need to pre-format SQL with static values. Examples of it can be a\r\n * schema name, or a configurable table name.\r\n *\r\n * This option makes two-step SQL formatting easy: you can pre-format the SQL initially, and then\r\n * apply the second-step dynamic formatting when executing the query.\r\n *\r\n * @property {boolean} noWarnings=false\r\n * Suppresses all warnings produced by the class. It is not recommended for general use, only in specific tests\r\n * that may require it.\r\n *\r\n */\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}