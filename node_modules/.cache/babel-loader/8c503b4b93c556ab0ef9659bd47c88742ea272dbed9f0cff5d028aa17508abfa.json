{"ast":null,"code":"var _jsxFileName = \"/Users/luna/Library/Mobile Documents/com~apple~CloudDocs/GitHub/paucamcal.github.io/AESP/src/App.js\";\nimport React, { Component } from 'react';\nimport Geolocation from './Geolocation';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      organizations: [],\n      userLocation: null // Store user's location data here\n    };\n    // Function to extract zip code from the geocoding response\n    this.extractZipCode = geoData => {\n      var _geoData$results$;\n      // Parse the response data to find the zip code\n      const addressComponents = ((_geoData$results$ = geoData.results[0]) === null || _geoData$results$ === void 0 ? void 0 : _geoData$results$.address_components) || [];\n      for (const component of addressComponents) {\n        const types = component.types || [];\n        if (types.includes('postal_code')) {\n          return component.short_name;\n        }\n      }\n      return null; // Zip code not found\n    };\n    // Function to find the nearest organization based on user's zip code\n    this.findNearestOrganization = async userZipCode => {\n      // Replace 'YOUR_API_ENDPOINT' with your actual API endpoint URL\n      const apiUrl = `https://example.com/api/organizations?zipCode=${userZipCode}`;\n      try {\n        const response = await fetch(apiUrl);\n        if (!response.ok) {\n          throw new Error('Failed to fetch data from the API');\n        }\n        const data = await response.json();\n\n        // Find the nearest organization based on user's zip code\n        let nearestOrganization = null;\n        let nearestDistance = Infinity;\n        for (const org of data.organizations) {\n          // Replace this with your distance calculation logic\n          // Example: Haversine formula or any other suitable method\n          const distance = this.calculateDistance(this.state.userLocation.latitude, this.state.userLocation.longitude, org.latitude, org.longitude);\n          if (distance < nearestDistance) {\n            nearestDistance = distance;\n            nearestOrganization = org;\n          }\n        }\n        return nearestOrganization;\n      } catch (error) {\n        throw error;\n      }\n    };\n    // Function to calculate distance between two sets of coordinates\n    this.calculateDistance = (lat1, lon1, lat2, lon2) => {\n      // Convert latitude and longitude from degrees to radians\n      const degToRad = degrees => degrees * Math.PI / 180;\n      const radius = 6371; // Radius of the Earth in kilometers\n\n      const lat1Rad = degToRad(lat1);\n      const lon1Rad = degToRad(lon1);\n      const lat2Rad = degToRad(lat2);\n      const lon2Rad = degToRad(lon2);\n\n      // Haversine formula\n      const dLat = lat2Rad - lat1Rad;\n      const dLon = lon2Rad - lon1Rad;\n      const a = Math.sin(dLat / 2) ** 2 + Math.cos(lat1Rad) * Math.cos(lat2Rad) * Math.sin(dLon / 2) ** 2;\n      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n\n      // Calculate the distance in kilometers\n      const distance = radius * c;\n      return distance;\n    };\n  }\n  componentDidMount() {\n    // Access the API key from environment variables\n    const apiKey = process.env.REACT_APP_GOOGLE_API_KEY;\n\n    // Check if geolocation is available\n    if ('geolocation' in navigator) {\n      navigator.geolocation.getCurrentPosition(async position => {\n        // Get the user's latitude and longitude\n        const {\n          latitude,\n          longitude\n        } = position.coords;\n\n        // Create the API request URL to convert coordinates to zip code\n        const geoApiUrl = `https://maps.googleapis.com/maps/api/geocode/json?latlng=${latitude},${longitude}&key=${apiKey}`;\n        try {\n          // Make the API request to get address components, including zip code\n          const geoResponse = await fetch(geoApiUrl);\n          if (!geoResponse.ok) {\n            throw new Error('Failed to fetch geolocation data from the API');\n          }\n          const geoData = await geoResponse.json();\n\n          // Extract the zip code from the response data\n          const zipCode = this.extractZipCode(geoData);\n\n          // Store the user's location and zip code in the state\n          this.setState({\n            userLocation: {\n              latitude,\n              longitude\n            },\n            userZipCode: zipCode\n          });\n\n          // Now you can use the user's zip code to find the nearest organization\n          const nearestOrg = await this.findNearestOrganization(zipCode);\n          console.log('Nearest Organization:', nearestOrg);\n        } catch (geoError) {\n          console.error('Error fetching geolocation data:', geoError);\n        }\n      });\n    } else {\n      // Geolocation is not available in this browser\n      // Handle accordingly, e.g., by showing a message to the user\n    }\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"main\",\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"ALTERNATIVE EMERGENCY LINES TO POLICE\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card card__lgbtq\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"card__category\",\n            children: \"LGBTQ+ Support\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"card__heading\",\n            children: \"Example Card Heading\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card card__domesticviolence\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"card__category\",\n            children: \"Domestic Violence Support\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"card__heading\",\n            children: \"Example Card Heading\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card card__mentalhealth\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"card__category\",\n            children: \"Mental Health Services\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"card__heading\",\n            children: \"Example Card Heading\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card card__elderlyservices\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"card__category\",\n            children: \"Elderly Services\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 164,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"card__heading\",\n            children: \"Example Card Heading\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"responsive-buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"card__button\",\n          children: \"Don't Call the Police\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"card__button\",\n          children: \"911\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default App;","map":{"version":3,"names":["React","Component","Geolocation","jsxDEV","_jsxDEV","App","constructor","args","state","organizations","userLocation","extractZipCode","geoData","_geoData$results$","addressComponents","results","address_components","component","types","includes","short_name","findNearestOrganization","userZipCode","apiUrl","response","fetch","ok","Error","data","json","nearestOrganization","nearestDistance","Infinity","org","distance","calculateDistance","latitude","longitude","error","lat1","lon1","lat2","lon2","degToRad","degrees","Math","PI","radius","lat1Rad","lon1Rad","lat2Rad","lon2Rad","dLat","dLon","a","sin","cos","c","atan2","sqrt","componentDidMount","apiKey","process","env","REACT_APP_GOOGLE_API_KEY","navigator","geolocation","getCurrentPosition","position","coords","geoApiUrl","geoResponse","zipCode","setState","nearestOrg","console","log","geoError","render","className","children","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/Users/luna/Library/Mobile Documents/com~apple~CloudDocs/GitHub/paucamcal.github.io/AESP/src/App.js"],"sourcesContent":["import React, { Component } from 'react';\nimport Geolocation from './Geolocation';\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    organizations: [],\n    userLocation: null, // Store user's location data here\n  };\n\n  componentDidMount() {\n    // Access the API key from environment variables\n    const apiKey = process.env.REACT_APP_GOOGLE_API_KEY;\n\n    // Check if geolocation is available\n    if ('geolocation' in navigator) {\n      navigator.geolocation.getCurrentPosition(async (position) => {\n        // Get the user's latitude and longitude\n        const { latitude, longitude } = position.coords;\n\n        // Create the API request URL to convert coordinates to zip code\n        const geoApiUrl = `https://maps.googleapis.com/maps/api/geocode/json?latlng=${latitude},${longitude}&key=${apiKey}`;\n\n        try {\n          // Make the API request to get address components, including zip code\n          const geoResponse = await fetch(geoApiUrl);\n          if (!geoResponse.ok) {\n            throw new Error('Failed to fetch geolocation data from the API');\n          }\n\n          const geoData = await geoResponse.json();\n\n          // Extract the zip code from the response data\n          const zipCode = this.extractZipCode(geoData);\n\n          // Store the user's location and zip code in the state\n          this.setState({\n            userLocation: { latitude, longitude },\n            userZipCode: zipCode,\n          });\n\n          // Now you can use the user's zip code to find the nearest organization\n          const nearestOrg = await this.findNearestOrganization(zipCode);\n          console.log('Nearest Organization:', nearestOrg);\n        } catch (geoError) {\n          console.error('Error fetching geolocation data:', geoError);\n        }\n      });\n    } else {\n      // Geolocation is not available in this browser\n      // Handle accordingly, e.g., by showing a message to the user\n    }\n  }\n\n  // Function to extract zip code from the geocoding response\n  extractZipCode = (geoData) => {\n    // Parse the response data to find the zip code\n    const addressComponents = geoData.results[0]?.address_components || [];\n\n    for (const component of addressComponents) {\n      const types = component.types || [];\n      if (types.includes('postal_code')) {\n        return component.short_name;\n      }\n    }\n\n    return null; // Zip code not found\n  };\n\n  // Function to find the nearest organization based on user's zip code\n  findNearestOrganization = async (userZipCode) => {\n    // Replace 'YOUR_API_ENDPOINT' with your actual API endpoint URL\n    const apiUrl = `https://example.com/api/organizations?zipCode=${userZipCode}`;\n\n    try {\n      const response = await fetch(apiUrl);\n\n      if (!response.ok) {\n        throw new Error('Failed to fetch data from the API');\n      }\n\n      const data = await response.json();\n\n      // Find the nearest organization based on user's zip code\n      let nearestOrganization = null;\n      let nearestDistance = Infinity;\n\n      for (const org of data.organizations) {\n        // Replace this with your distance calculation logic\n        // Example: Haversine formula or any other suitable method\n        const distance = this.calculateDistance(\n          this.state.userLocation.latitude,\n          this.state.userLocation.longitude,\n          org.latitude,\n          org.longitude\n        );\n\n        if (distance < nearestDistance) {\n          nearestDistance = distance;\n          nearestOrganization = org;\n        }\n      }\n\n      return nearestOrganization;\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  // Function to calculate distance between two sets of coordinates\n  calculateDistance = (lat1, lon1, lat2, lon2) => {\n    // Convert latitude and longitude from degrees to radians\n    const degToRad = (degrees) => (degrees * Math.PI) / 180;\n    const radius = 6371; // Radius of the Earth in kilometers\n\n    const lat1Rad = degToRad(lat1);\n    const lon1Rad = degToRad(lon1);\n    const lat2Rad = degToRad(lat2);\n    const lon2Rad = degToRad(lon2);\n\n    // Haversine formula\n    const dLat = lat2Rad - lat1Rad;\n    const dLon = lon2Rad - lon1Rad;\n\n    const a =\n      Math.sin(dLat / 2) ** 2 +\n      Math.cos(lat1Rad) * Math.cos(lat2Rad) * Math.sin(dLon / 2) ** 2;\n\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n\n    // Calculate the distance in kilometers\n    const distance = radius * c;\n\n    return distance;\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <section className=\"main\">\n          <h1>ALTERNATIVE EMERGENCY LINES TO POLICE</h1>\n        </section>\n        <div className=\"grid\">\n          {/* LGBTQ+ Card */}\n          <div className=\"card card__lgbtq\">\n            <p className=\"card__category\">LGBTQ+ Support</p>\n            <h3 className=\"card__heading\">Example Card Heading</h3>\n          </div>\n\n          {/* Domestic Violence Card */}\n          <div className=\"card card__domesticviolence\">\n            <p className=\"card__category\">Domestic Violence Support</p>\n            <h3 className=\"card__heading\">Example Card Heading</h3>\n          </div>\n\n          {/* Mental Health Card */}\n          <div className=\"card card__mentalhealth\">\n            <p className=\"card__category\">Mental Health Services</p>\n            <h3 className=\"card__heading\">Example Card Heading</h3>\n          </div>\n\n          {/* Elderly Services Card */}\n          <div className=\"card card__elderlyservices\">\n            <p className=\"card__category\">Elderly Services</p>\n            <h3 className=\"card__heading\">Example Card Heading</h3>\n          </div>\n        </div>\n        <div className=\"responsive-buttons\">\n          {/* Don't Call the Police Button */}\n          <button className=\"card__button\">Don't Call the Police</button>\n          \n          {/* 911 Button */}\n          <button className=\"card__button\">911</button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}